ds.ordreg<-ds.ordcols[,colSums(ds.ordcols)/sum(ds.ordcols)>0.01]
#I then create a new data frame that contains all of the order data and determine relative abundance using the decostand function from vegan.
library(vegan)
ds.ordtot2<-data.frame(state=ds.ordtot$state,ds.ordreg,Other=ds.ordothers, Unclassified=ds.ordunknownsum)
ds.ordrelabund<-decostand(ds.ordtot2[,2:25],method="total")
ds.ordrelabund<-data.frame(state=ds.rareotutabord.statesum$state,ds.ordrelabund)
#Below I use the melt function from the data.table package to reformat the data into stacked bar graph format.
library(data.table)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
ds.ordrelabundmelt<-melt(ds.ordrelabund, id.vars="state", variable.name="order")
ds.ord.colorCount<- length(unique(ds.ordrelabundmelt[,'order']))
getPalette=colorRampPalette(brewer.pal(9,"Set1"))
#Below I generate the relative abundance bar charts in ggplot
ds.ordrel<-ggplot(ds.ordrelabundmelt, aes(x=state, y=value, fill=order))+
geom_bar(stat="identity",show.legend=TRUE,color="black")+
scale_fill_manual(values=getPalette(ds.ord.colorCount))+
xlab("State") +
ylab("Relative Abundance") +
theme(panel.border = element_blank(),panel.background=element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x = element_text(size = 14), axis.ticks.x = element_blank(), axis.text.y = element_text(size = 14), axis.line.y.left = element_line(), axis.title.y = element_text(size = 14))+
scale_y_continuous(breaks=c(0,0.25,0.50,0.75,1),limits=c(0,1.05))+
geom_text(data=NULL,aes(x=0.51, y=1.05,label="Caulosphere: 16S"),hjust=0,colour="black")
library(plotly)
ggplotly(ds.ordrel,tooltip=c("order"))
#ggsave(filename = "16s_drillshavings_ordrelabund.png", plot(ds.ordrel),dpi=300)
#The following chunk creates a relative abundance bar chart at the order level.
#What I am doing below is cleaning up the order names. These include assignment confidence levels, _or, and _.
library(plyr)
t.ds.raretabfam<-data.frame(family=t.ds.rareotutabtaxsep$family,t.ds.rareotu.nosingles)
t.ds.raretabfam$family<-sub("\\(.*)","",x=t.ds.raretabfam$family)
t.ds.raretabfam$family<-sub("_or","",x=t.ds.raretabfam$family)
t.ds.raretabfam$family<-sub("_"," ",x=t.ds.raretabfam$family)
#I then sum the OTUs by class and make the row names the order name.
t.ds.rareotutabfam<-as.data.frame(ddply(t.ds.raretabfam, .(family),colwise(sum)))
rownames(t.ds.rareotutabfam)<-make.names(t.ds.rareotutabfam$family)
t.ds.rareotutabfam<-t.ds.rareotutabfam[,2:41]
#I then transpose the data frame and sum each order by state.
ds.rareotutabfam<-as.data.frame(t(t.ds.rareotutabfam))
ds.rareotutabfam.state<-data.frame(state=ds.met.rare$State,ds.rareotutabfam)
ds.rareotutabfam.statesum<-as.data.frame(ddply(ds.rareotutabfam.state, .(state),colwise(sum)))
#At the class level, SILVA may classify things as unknown class, phylum.unclassified, or uncultured. These don't provide a lot of information and thus are grouped into a knew group called unknown.
ds.famunknown<-ds.rareotutabfam.statesum[,grep(".unclassified|Unknown.Family|uncultured",names(ds.rareotutabfam.statesum))]
#I then use the same grep function as above to pull out the Family with meaningful information. By setting invert=TRUE I select items lacking the strings in the grep command.
ds.famunknownsum<-rowSums(ds.famunknown)
ds.famtot<-ds.rareotutabfam.statesum[,grep(".unclassified|Unknown.Family|uncultured",names(ds.rareotutabfam.statesum), invert=TRUE)]
#I then subset the data so that only numerical data is present and creating a new class of objects, other, that includes OTUs from order that represent 1% or less of the total community.
ds.famcols<-ds.famtot[,2:153]
ds.famoth<-ds.famcols[,colSums(ds.famcols)/sum(ds.famcols)<=0.01]
ds.famothers<-rowSums(ds.famoth)
ds.famreg<-ds.famcols[,colSums(ds.famcols)/sum(ds.famcols)>0.01]
#I then create a new data frame that contains all of the order data and determine relative abundance using the decostand function from vegan.
library(vegan)
ds.famtot2<-data.frame(state=ds.famtot$state,ds.famreg,Other=ds.famothers, Unclassified=ds.famunknownsum)
ds.famrelabund<-decostand(ds.famtot2[,2:25],method="total")
ds.famrelabund<-data.frame(state=ds.rareotutabfam.statesum$state,ds.famrelabund)
#Below I use the melt function from the data.table package to reformat the data into stacked bar graph format.
library(data.table)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
ds.famrelabundmelt<-melt(ds.famrelabund, id.vars="state", variable.name="family")
ds.fam.colorCount<- length(unique(ds.famrelabundmelt[,'family']))
getPalette=colorRampPalette(brewer.pal(9,"Set1"))
#Below I generate the relative abundance bar charts in ggplot
ds.famrel<-ggplot(ds.famrelabundmelt, aes(x=state, y=value, fill=family))+
geom_bar(stat="identity",show.legend=TRUE,color="black")+
scale_fill_manual(values=getPalette(ds.fam.colorCount))+
xlab("State") +
ylab("Relative Abundance") +
theme(panel.border = element_blank(),panel.background=element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x = element_text(size = 14), axis.ticks.x = element_blank(), axis.text.y = element_text(size = 14), axis.line.y.left = element_line(), axis.title.y = element_text(size = 14))+
scale_y_continuous(breaks=c(0,0.25,0.50,0.75,1),limits=c(0,1.05))+
geom_text(data=NULL,aes(x=0.51, y=1.05,label="Caulosphere: 16S"),hjust=0,colour="black")
library(plotly)
ggplotly(ds.famrel,tooltip=c("family"))
ggsave(filename = "16s_drillshavings_famrelabund.png", plot(ds.famrel),dpi=300)
#Below I am reformatting the OTU table so that I can begin to filter and merge the taxonomy information.
#I first transpose the rarefied OTU table with no singletons.
t.ds.rareotu.nosingles<-as.data.frame(t(ds.rareotu.nosingles))
#The below function is asking specifically for the OTU IDs. These are the row names. I will use these to subset the taxonomy file.
t.ds.rareotu.nosingleslabs<-labels(t.ds.rareotu.nosingles)
ds.taxrare<-subset(taxonomy.ds, rownames(taxonomy.ds) %in% t.ds.rareotu.nosingleslabs[[1]])
ds.taxrareinfo<-(ds.taxrare[,2])
#Below I am using the separate function from tidyr to split the taxonomy strings into columns by semi-colon so that I can rename the OTUs to give them more meaning for downstream analyses.
library(tidyr)
ds.taxonomylabs<-c("kingdom","phylum","class","order","family","genus")
t.ds.rareotutabtax<-data.frame(taxonomy=ds.taxrareinfo,t.ds.rareotu.nosingles)
t.ds.rareotutabtaxsep<-separate(t.ds.rareotutabtax,into=ds.taxonomylabs,col=taxonomy,sep=";")
#Here I am renaming the OTUs using the make.names function. This will make the OTU name something more informative. I am using genus to do this.
t.ds.rareotutabtaxsep$genus<-sub("\\(.*)","",x=t.ds.rareotutabtaxsep$genus)
t.ds.rareotutabtaxsep$genus<-sub("(_unclassified)","",x=t.ds.rareotutabtaxsep$genus)
t.ds.rareotutabtax.rename<-t.ds.rareotutabtaxsep[,7:46]
rownames(t.ds.rareotutabtaxsep)<-make.names(paste(rownames(t.ds.rareotutabtaxsep),t.ds.rareotutabtaxsep$genus,sep="_"))
ds.rareotutabtax.rename<-as.data.frame(t(t.ds.rareotutabtax.rename))
#Below I convert raw abundances to relative abundance using the decostand function from vegan.
library(vegan)
ds.relabund<-decostand(ds.rareotutabtax.rename, method="total")
#Below I calculate the distance matrix using the bray-curtis method and the perform the principal coordinate analysis on the relativized OTU table.
ds.bacdist<-vegdist(ds.relabund, method="bray")
library(ape)
ds.bac.pcoa<-pcoa(ds.bacdist)
#biplot(bacdspcoa,plot.axes = c(1,2))
#We need to first subset our metadata table to include only those samples that passed rarefaction.
ds.met.rare<-subset(ds.met,ds.met$Group%in% ds.samples)
#Then we extract PCoA site scores (these will be the x and y coordinates for each sample)
ds.bac.pcoavec<-as.data.frame(ds.bac.pcoa$vectors)
ds.bac.pcoasitescores<-data.frame(PC1=ds.bac.pcoavec$Axis.1, PC2=ds.bac.pcoavec$Axis.2)
#Create a new dataframe that includes the site scores from above with metadata from your study.
ds.bac.pcoagraph<-data.frame(ds.bac.pcoasitescores,PC1=ds.bac.pcoasitescores$PC1, PC2=ds.bac.pcoasitescores$PC2, State=ds.met.rare$State, Clone=ds.met.rare$Clone,group=ds.met.rare$Group)
#This is where you make confidence ellipses. I don't know what all the code means. Just know where to plug in my objects.
ds.bac.pcoaellipse<-ordiellipse(ds.bac.pcoasitescores,ds.bac.pcoagraph$State, display="sites", kind="sd", draw="none")
df_ell.bark16s <- data.frame()
for(g in levels(ds.bac.pcoagraph$State)){
df_ell.bark16s <- rbind(df_ell.bark16s, cbind(as.data.frame(with(ds.bac.pcoagraph[ds.bac.pcoagraph$State==g,],                                                vegan:::veganCovEllipse(ds.bac.pcoaellipse[[g]]$cov,ds.bac.pcoaellipse[[g]]$center,ds.bac.pcoaellipse[[g]]$scale))) ,State=g))}
#Plot PCoA in ggplot
library(ggplot2)
ds.pcoa<-ggplot(ds.bac.pcoagraph, aes(PC1,PC2))+
#geom_text(aes(label=group))+
geom_path(data=df_ell.bark16s, aes(x=PC1, y=PC2, colour=State),size=0.5, linetype=1)+
geom_point(aes(shape=Clone,colour=State), size=3.5)+
xlab("PC1 (32.0%)")+
ylab("PC2 (12.4%)")+
theme(axis.title.x=element_text(size=14, face="bold"))+
theme(axis.title.y=element_text(,size=14, face="bold"))+
theme(axis.text.x=element_text(size=12, face="bold"))+
theme(axis.text.y=element_text(size=12, face="bold"))+
scale_color_manual(values=c("#006600","#3399FF","#FF9900"))+
geom_text(aes(x=-0.60, y=0.60, label="Caulosphere: 16S"),hjust=0,colour="black")+
scale_shape_manual(values=c(16,10,8,7,0,2))+
scale_x_continuous(breaks=c(-0.60,-0.30,0,0.30,0.60),limits=c(-0.60,0.60))+
scale_y_continuous(breaks=c(-0.60,-0.30,0,0.30,0.60),limits=c(-.60,.60))+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_rect(colour="black", size=1, fill=NA))+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.background = element_blank(),
panel.border=element_rect(color="black", size=1, fill=NA))
ds.pcoa
#ggsave(filename = "16s_drillshavings_pcoa.png", plot(ds.pcoa),dpi=300)
#Below I perform permanovas by state and clone using the adonis function from vegan.
library(vegan)
ds.bac.perm.state.inter<-adonis(ds.relabund~ds.met.rare$State*ds.met.rare$Clone, method="bray",permutations=10000)
ds.bac.perm.state.inter
ds.bac.perm.state.add<-adonis(ds.relabund~ds.met.rare$State+ds.met.rare$Clone, method="bray",permutations=10000)
ds.bac.perm.state.add
ds.bac.perm.state.sing<-adonis(ds.relabund~ds.met.rare$State, method="bray",permutations=10000)
ds.bac.perm.state.sing
#In this chunk we calculate richness and create a data frame including richness with metadata
#I first import my rarefied OTU table that contains singletons.
ds.rareotu.wsingles<-read.table("/Volumes/AaronOnufrakMac/researchprojects_2019.2022_ajo/j.nigra_microbiome_2017_ajo_gmw/barks16sstatistics_jnigra17_2019_ajo/bark16smothur_jnigra17_microbiome/bark16sotutable.rarefied_jnigra17_fa19_ajo.shared", header=TRUE, sep="\t")
#Below I calculate observed species richness using the specnumber function from vegan. I then create a new data frame to include sample metadata.
library(vegan)
ds.bac.rich<-specnumber(ds.rareotu.wsingles)
ds.richnesstabmet<-data.frame(State=ds.met.rare$State, clone=ds.met.rare$Clone, sample=ds.met.rare$Group,Richness=ds.bac.rich)
#I first test for a significant interaction between state and clone. Due to the unbalanced design we use a type 3 ANOVA.
library(car)
ds.anova.typ3.rich<-aov((Richness)~State*clone, data=ds.richnesstabmet)
ds.typ3aov.rich<-Anova(ds.anova.typ3.rich,type="III")
ds.typ3aov.rich
kable(ds.typ3aov.rich)
#The below two lines generate plots to evaluate regression assumptions.
par(mfrow=c(2,2))
plot(ds.anova.typ3.rich)
#There was no significant interaction between state and clone and thus we drop the interaction term.
ds.anova.add.rich<-aov((Richness)~State+clone, data=ds.richnesstabmet)
ds.add.aov.rich<-Anova(ds.anova.add.rich,type="III")
ds.add.aov.rich
kable(ds.add.aov.rich)
#Perform Tukey test
ds.add.aov.rich.tukey<-(TukeyHSD(ds.anova.add.rich))
ds.add.aov.rich.tukey.table<-rbind(ds.add.aov.rich.tukey$State,ds.add.aov.rich.tukey$clone)
ds.add.aov.rich.tukey.table
kable(ds.add.aov.rich.tukey.table)
#The below two lines generate plots to evaluate regression assumptions.
par(mfrow=c(2,2))
plot(ds.anova.add.rich)
#There was no significant interaction between state and clone and thus we drop the interaction term.
ds.anova.sing.rich<-aov((Richness)~State, data=ds.richnesstabmet)
ds.sing.aov.rich<-Anova(ds.anova.sing.rich,type="III")
ds.sing.aov.rich
kable(ds.sing.aov.rich)
#Perform Tukey test
ds.anova.sing.rich.tukey<-TukeyHSD(ds.anova.sing.rich)
ds.anova.sing.rich.tukey.table<-rbind(ds.anova.sing.rich.tukey$State)
ds.anova.sing.rich.tukey.table
kable(ds.anova.sing.rich.tukey.table)
#The below two lines generate plots to evaluate regression assumptions.
par(mfrow=c(2,2))
plot(ds.anova.sing.rich)
#I then create a box plot for the richness data by state using ggplot.
library(Hmisc)
library(ggpubr)
ds.richness.summarized<-summarize(ds.richnesstabmet$Richness,by=ds.richnesstabmet$State, FUN=max)
ds.richness.summarized<-data.frame(State=ds.richness.summarized$`ds.richnesstabmet$State`,Richness=ds.richness.summarized$`ds.richnesstabmet$Richness`)
library(ggplot2)
library(ggpubr)
#Below I create a boxplot for richness values.
ds.rich<-ggboxplot(ds.richnesstabmet, x="State", y="Richness", outlier.shape=NA)+
geom_jitter(data=ds.richnesstabmet,position=position_jitter(0.2), aes(shape=clone),size=3)+
scale_shape_manual(values=c(16,10,8,7,0,2))+
#geom_text(data=richness.summarized, aes(x=State, y = 25 + Richness, label=Group, fontface="bold"))+
#scale_fill_manual(values=c("#006600","#3399FF","#FF9900"))+
geom_text(data=NULL,aes(x=1, y=620, label="A"))+
geom_text(data=NULL,aes(x=2, y=425, label="B"))+
geom_text(data=NULL,aes(x=3, y=185, label="C"))+
geom_text(data=NULL,aes(x=0.5, y=710, label="Caulosphere: 16S"),hjust=0,colour="black")+
theme(axis.line.x=element_blank(),
axis.text.x=element_blank(),
axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text=element_text(),
axis.title=element_text())
ds.rich
#In this chunk we calculate richness and create a data frame including richness with metadata
#I first import my rarefied OTU table that contains singletons.
ds.rareotu.wsingles<-read.table("/Volumes/AaronOnufrakMac/researchprojects_2019.2022_ajo/j.nigra_microbiome_2017_ajo_gmw/barks16sstatistics_jnigra17_2019_ajo/bark16smothur_jnigra17_microbiome/bark16sotutable.rarefied_jnigra17_fa19_ajo.shared", header=TRUE, sep="\t")
#Below I calculate observed species richness using the specnumber function from vegan. I then create a new data frame to include sample metadata.
library(vegan)
ds.bac.rich<-specnumber(ds.rareotu.wsingles)
ds.richnesstabmet<-data.frame(State=ds.met.rare$State, clone=ds.met.rare$Clone, sample=ds.met.rare$Group,Richness=ds.bac.rich)
#I first test for a significant interaction between state and clone. Due to the unbalanced design we use a type 3 ANOVA.
library(car)
ds.anova.typ3.rich<-aov((Richness)~State*clone, data=ds.richnesstabmet)
ds.typ3aov.rich<-Anova(ds.anova.typ3.rich,type="III")
ds.typ3aov.rich
kable(ds.typ3aov.rich)
#The below two lines generate plots to evaluate regression assumptions.
par(mfrow=c(2,2))
plot(ds.anova.typ3.rich)
#There was no significant interaction between state and clone and thus we drop the interaction term.
ds.anova.add.rich<-aov((Richness)~State+clone, data=ds.richnesstabmet)
ds.add.aov.rich<-Anova(ds.anova.add.rich,type="III")
ds.add.aov.rich
kable(ds.add.aov.rich)
#Perform Tukey test
ds.add.aov.rich.tukey<-(TukeyHSD(ds.anova.add.rich))
ds.add.aov.rich.tukey.table<-rbind(ds.add.aov.rich.tukey$State,ds.add.aov.rich.tukey$clone)
ds.add.aov.rich.tukey.table
kable(ds.add.aov.rich.tukey.table)
#The below two lines generate plots to evaluate regression assumptions.
par(mfrow=c(2,2))
plot(ds.anova.add.rich)
#There was no significant interaction between state and clone and thus we drop the interaction term.
ds.anova.sing.rich<-aov((Richness)~State, data=ds.richnesstabmet)
ds.sing.aov.rich<-Anova(ds.anova.sing.rich,type="III")
ds.sing.aov.rich
kable(ds.sing.aov.rich)
#Perform Tukey test
ds.anova.sing.rich.tukey<-TukeyHSD(ds.anova.sing.rich)
ds.anova.sing.rich.tukey.table<-rbind(ds.anova.sing.rich.tukey$State)
ds.anova.sing.rich.tukey.table
kable(ds.anova.sing.rich.tukey.table)
#The below two lines generate plots to evaluate regression assumptions.
par(mfrow=c(2,2))
plot(ds.anova.sing.rich)
#I then create a box plot for the richness data by state using ggplot.
library(Hmisc)
library(ggpubr)
ds.richness.summarized<-summarize(ds.richnesstabmet$Richness,by=ds.richnesstabmet$State, FUN=max)
ds.richness.summarized<-data.frame(State=ds.richness.summarized$`ds.richnesstabmet$State`,Richness=ds.richness.summarized$`ds.richnesstabmet$Richness`)
library(ggplot2)
library(ggpubr)
#Below I create a boxplot for richness values.
ds.rich<-ggboxplot(ds.richnesstabmet, x="State", y="Richness", outlier.shape=NA)+
geom_jitter(data=ds.richnesstabmet,position=position_jitter(0.2), aes(shape=clone),size=3)+
scale_shape_manual(values=c(16,10,8,7,0,2))+
#geom_text(data=richness.summarized, aes(x=State, y = 25 + Richness, label=Group, fontface="bold"))+
#scale_fill_manual(values=c("#006600","#3399FF","#FF9900"))+
geom_text(data=NULL,aes(x=1, y=620, label="A"))+
geom_text(data=NULL,aes(x=2, y=425, label="B"))+
geom_text(data=NULL,aes(x=3, y=185, label="C"))+
geom_text(data=NULL,aes(x=0.5, y=710, label="Caulosphere: 16S"),hjust=0,colour="black")+
theme(axis.line.x=element_blank(),
axis.text.x=element_blank(),
axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text=element_text(),
axis.title=element_text())
ds.rich
#I first import my rarefied OTU table that contains singletons.
ds.rareotu.wsingles<-read.table("Mothur_output/bark16sotutable.rarefied_jnigra17_fa19_ajo.shared", header=TRUE, sep="\t")
#Below I perform permanovas by state and clone using the adonis function from vegan.
library(vegan)
ds.bac.perm.state.inter<-adonis(ds.relabund~ds.met.rare$State*ds.met.rare$Clone, method="bray",permutations=10000)
ds.bac.perm.state.inter
ds.bac.perm.state.add<-adonis(ds.relabund~ds.met.rare$State+ds.met.rare$Clone, method="bray",permutations=10000)
ds.bac.perm.state.add
ds.bac.perm.state.sing<-adonis(ds.relabund~ds.met.rare$State, method="bray",permutations=10000)
ds.bac.perm.state.sing
#In this chunk we calculate richness and create a data frame including richness with metadata
#I first import my rarefied OTU table that contains singletons.
ds.rareotu.wsingles<-read.table("Mothur_output/bark16sotutable.rarefied_jnigra17_fa19_ajo.shared", header=TRUE, sep="\t")
#Below I calculate observed species richness using the specnumber function from vegan. I then create a new data frame to include sample metadata.
library(vegan)
ds.bac.rich<-specnumber(ds.rareotu.wsingles)
ds.richnesstabmet<-data.frame(State=ds.met.rare$State, clone=ds.met.rare$Clone, sample=ds.met.rare$Group,Richness=ds.bac.rich)
#I first test for a significant interaction between state and clone. Due to the unbalanced design we use a type 3 ANOVA.
library(car)
ds.anova.typ3.rich<-aov((Richness)~State*clone, data=ds.richnesstabmet)
ds.typ3aov.rich<-Anova(ds.anova.typ3.rich,type="III")
ds.typ3aov.rich
kable(ds.typ3aov.rich)
#The below two lines generate plots to evaluate regression assumptions.
par(mfrow=c(2,2))
plot(ds.anova.typ3.rich)
#There was no significant interaction between state and clone and thus we drop the interaction term.
ds.anova.add.rich<-aov((Richness)~State+clone, data=ds.richnesstabmet)
ds.add.aov.rich<-Anova(ds.anova.add.rich,type="III")
ds.add.aov.rich
kable(ds.add.aov.rich)
#Perform Tukey test
ds.add.aov.rich.tukey<-(TukeyHSD(ds.anova.add.rich))
ds.add.aov.rich.tukey.table<-rbind(ds.add.aov.rich.tukey$State,ds.add.aov.rich.tukey$clone)
ds.add.aov.rich.tukey.table
kable(ds.add.aov.rich.tukey.table)
#The below two lines generate plots to evaluate regression assumptions.
par(mfrow=c(2,2))
plot(ds.anova.add.rich)
#There was no significant interaction between state and clone and thus we drop the interaction term.
ds.anova.sing.rich<-aov((Richness)~State, data=ds.richnesstabmet)
ds.sing.aov.rich<-Anova(ds.anova.sing.rich,type="III")
ds.sing.aov.rich
kable(ds.sing.aov.rich)
#Perform Tukey test
ds.anova.sing.rich.tukey<-TukeyHSD(ds.anova.sing.rich)
ds.anova.sing.rich.tukey.table<-rbind(ds.anova.sing.rich.tukey$State)
ds.anova.sing.rich.tukey.table
kable(ds.anova.sing.rich.tukey.table)
#The below two lines generate plots to evaluate regression assumptions.
par(mfrow=c(2,2))
plot(ds.anova.sing.rich)
#I then create a box plot for the richness data by state using ggplot.
library(Hmisc)
library(ggpubr)
ds.richness.summarized<-summarize(ds.richnesstabmet$Richness,by=ds.richnesstabmet$State, FUN=max)
ds.richness.summarized<-data.frame(State=ds.richness.summarized$`ds.richnesstabmet$State`,Richness=ds.richness.summarized$`ds.richnesstabmet$Richness`)
library(ggplot2)
library(ggpubr)
#Below I create a boxplot for richness values.
ds.rich<-ggboxplot(ds.richnesstabmet, x="State", y="Richness", outlier.shape=NA)+
geom_jitter(data=ds.richnesstabmet,position=position_jitter(0.2), aes(shape=clone),size=3)+
scale_shape_manual(values=c(16,10,8,7,0,2))+
#geom_text(data=richness.summarized, aes(x=State, y = 25 + Richness, label=Group, fontface="bold"))+
#scale_fill_manual(values=c("#006600","#3399FF","#FF9900"))+
geom_text(data=NULL,aes(x=1, y=620, label="A"))+
geom_text(data=NULL,aes(x=2, y=425, label="B"))+
geom_text(data=NULL,aes(x=3, y=185, label="C"))+
geom_text(data=NULL,aes(x=0.5, y=710, label="Caulosphere: 16S"),hjust=0,colour="black")+
theme(axis.line.x=element_blank(),
axis.text.x=element_blank(),
axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text=element_text(),
axis.title=element_text())
ds.rich
#In this chunk we calculate shannon diversity and create a data frame including diversity with metadata
#I first import my rarefied OTU table that contains singletons.
ds.rareotu.wsingles<-read.table("/Volumes/AaronOnufrakMac/researchprojects_2019.2022_ajo/j.nigra_microbiome_2017_ajo_gmw/barks16sstatistics_jnigra17_2019_ajo/bark16smothur_jnigra17_microbiome/bark16sotutable.rarefied_jnigra17_fa19_ajo.shared", header=TRUE, sep="\t")
#Calculate shannon diversity using the diversity function of vegan
library(vegan)
ds.bac.div<-diversity (ds.rareotu.wsingles, index="shannon")
#I then create a new data frame to include sample metadata.
ds.diversity.tabmet<-data.frame(State=ds.met.rare$State, clone=ds.met.rare$Clone, sample=ds.met.rare$Group,Shannon=ds.bac.div)
#I first test for a significant interaction between state and clone. Due to the unbalanced design we use a type 3 ANOVA.
library(car)
ds.anova.typ3.div<-aov((Shannon)~State*clone, data=ds.diversity.tabmet)
ds.typ3aov.div<-Anova(ds.anova.typ3.div,type="III")
ds.typ3aov.div
kable(ds.typ3aov.div)
#The below two lines generate plots to evaluate regression assumptions.
par(mfrow=c(2,2))
plot(ds.anova.typ3.div)
#There was no significant interaction between state and clone.
ds.anova.add.div<-aov((Shannon)~State+clone, data=ds.diversity.tabmet)
ds.add.aov.div<-Anova(ds.anova.add.div,type="III")
ds.add.aov.div
kable(ds.add.aov.div)
#Perform a tukey test
ds.anova.add.div.tukey<-TukeyHSD(ds.anova.add.div)
ds.anova.add.div.tukey.table<-rbind(ds.anova.add.div.tukey$State,ds.anova.add.div.tukey$clone)
ds.anova.add.div.tukey.table
kable(ds.anova.add.div.tukey.table)
#The below two lines generate plots to evaluate regression assumptions.
par(mfrow=c(2,2))
plot(ds.anova.add.div)
#There was no significant interaction between state and clone.
ds.anova.sing.div<-aov((Shannon)~State, data=ds.diversity.tabmet)
ds.sing.aov.div<-Anova(ds.anova.sing.div,type="III")
ds.sing.aov.div
kable(ds.sing.aov.div)
#Perform a Tukey test
ds.anova.sing.div.tukey<-TukeyHSD(ds.anova.sing.div)
ds.anova.sing.div.tukey.table<-rbind(ds.anova.sing.div.tukey$State,ds.anova.sing.div.tukey$clone)
ds.anova.sing.div.tukey.table
kable(ds.anova.sing.div.tukey.table)
#The below two lines generate plots to evaluate regression assumptions.
par(mfrow=c(2,2))
plot(ds.anova.sing.div)
#I then create a box plot for the richness data by state using ggplot.
library(Hmisc)
library(ggpubr)
ds.diversity.summarized<-summarize(ds.diversity.tabmet$Shannon,by=ds.diversity.tabmet$State, FUN=max)
ds.diversity.summarized<-data.frame(State=ds.diversity.summarized$`ds.diversity.tabmet$State`,Diversity=ds.diversity.summarized$`ds.diversity.tabmet$Shannon`)
library(ggplot2)
library(ggpubr)
#Below I create a boxplot for richness values.
ds.div<-ggboxplot(ds.diversity.tabmet, x="State", y="Shannon", outlier.shape=NA)+
geom_jitter(data=ds.diversity.tabmet,position=position_jitter(0.2), aes(shape=clone),size=3)+
scale_shape_manual(values=c(16,10,8,7,0,2))+
#geom_text(data=diversity.summarized, aes(x=State, y = 0.5 + Diversity, label=group, fontface="bold"))+
#scale_fill_manual(values=c("#006600","#3399FF","#FF9900"))+
geom_text(data=NULL,aes(x=1, y=6.3, label="A"))+
geom_text(data=NULL,aes(x=2, y=5.5, label="B"))+
geom_text(data=NULL,aes(x=3, y=4.4, label="C"))+
geom_text(data=NULL,aes(x=0.5, y=7, label="Caulosphere: 16S"),hjust=0)+
scale_y_continuous(breaks=c(3,4,5,6),limits=c(2,7)) +
theme(axis.line.x=element_blank(),
axis.text.x=element_blank(),
axis.title.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_text(),
axis.text.y=element_text())
ds.div
dsalphdiv<-ggarrange(ds.rich,ds.div,ncol=1,nrow=2, align="v",common.legend = TRUE)
dsalphdiv
#ggsave(filename = "16s_drillshavings_alphdiv.png", plot(dsalphdiv),dpi=300)
#Here I am renaming the OTUs using the make.names function. This will make the OTU name something more informative. I am using genus to do this.
t.ds.rareotutabtaxsep$genus<-sub("\\(.*)","",x=t.ds.rareotutabtaxsep$genus)
t.ds.rareotutabtaxsep$genus<-sub("(_unclassified)","",x=t.ds.rareotutabtaxsep$genus)
t.ds.rareotutabtaxsep$genus<-sub("_ge","",x=t.ds.rareotutabtaxsep$genus)
rownames(t.ds.rareotutabtaxsep)<-make.names(paste(rownames(t.ds.rareotutabtaxsep),t.ds.rareotutabtaxsep$genus,sep="_"))
t.ds.rareotutabtax.rename<-t.ds.rareotutabtaxsep[,7:46]
ds.rareotutabtax.rename<-as.data.frame(t(t.ds.rareotutabtax.rename))
library(indicspecies)
set.seed(577)
indicspecies.bac.ds<-multipatt(ds.rareotutabtax.rename, ds.met.rare$State,func="IndVal.g",control=how(nperm=10000))
summary(indicspecies.bac.ds,indvalcomp=TRUE)
tcd.status<-c("Negative","Negative","Negative","Positive","Positive","Positive","Positive","Positive","Positive","Positive")
set.seed(577)
indicspecies.bac.disease<-multipatt(ds.rareotutabtax.rename[31:40,], tcd.status,func="IndVal.g",control=how(nperm=10000))
summary(indicspecies.bac.disease,indvalcomp=TRUE)
```{r}
ds.indicators<-read.table("IndicatorAnalysis/bark16s_indicatoranalysis_sp20_ajo.csv",header=TRUE,sep=",")
library(tidyr)
ds.indicators.long<-as.data.frame(pivot_longer(ds.indicators, cols=c("Specificity","Sensitivity","Indicator.Value"),"Statistic"))
ds.indicators.long$OTU<-sub("\\."," ",ds.indicators.long$OTU)
in.ds.indicators<-subset(ds.indicators.long,ds.indicators.long[,3]=="IN")
tn.ds.indicators<-subset(ds.indicators.long,ds.indicators.long[,3]=="TN")
tn.in.ds.indicators<-subset(ds.indicators.long,ds.indicators.long[,3]=="IN-TN")
wa.ds.indicators<-subset(ds.indicators.long,ds.indicators.long[,3]=="WA")
tcd.positive.ds.indicators<-subset(ds.indicators.long,ds.indicators.long[,3]=="Positive")
tcd.negative.ds.indicators<-subset(ds.indicators.long,ds.indicators.long[,3]=="Negative")
ds.indicator.mat<-ds.indicators[c(1:10,21:30,41:50,61:70,81:98),2:4]
rownames(ds.indicator.mat)<-ds.indicators$OTU[c(1:10,21:30,41:50,61:70,81:98)]
colnames(its2.soil.indicator.mat)<-colnames(its2.soil.indicators)[2:4]
ds.indicator.row.dat<-data.frame(State=ds.indicators$Group)
rownames(ds.indicator.row.dat)<-make.names(ds.indicators$OTU)
annotation_colors<-list(
State=c(IN="springgreen3", IN.TN="slateblue2", TN="skyblue1", WA="violet",Negative="olivedrab1", Positive="darkslategrey")
)
my_colors<-colorRampPalette(colors=c("darkblue","lightblue"))
library(ClassDiscovery)
library(pheatmap)
ds.heatmap<-pheatmap(ds.indicator.mat,
annotation_row=ds.indicator.row.dat,
color=gray.colors(15),
cluster_rows=FALSE,
cluster_cols=FALSE,
gaps_row=c(10,20,30,40,47),
annotation_colors=annotation_colors,
cellwidth = 10)
#ggsave("ds.indicator.png",ds.heatmap,height = 15,width=15,dpi=300)
#We need to first subset our metadata table to include only those samples that passed rarefaction.
ds.met.rare<-subset(ds.met,ds.met$Group%in% ds.samples)
#Then we extract PCoA site scores (these will be the x and y coordinates for each sample)
ds.bac.pcoavec<-as.data.frame(ds.bac.pcoa$vectors)
ds.bac.pcoasitescores<-data.frame(PC1=ds.bac.pcoavec$Axis.1, PC2=ds.bac.pcoavec$Axis.2)
#Create a new dataframe that includes the site scores from above with metadata from your study.
ds.bac.pcoagraph<-data.frame(ds.bac.pcoasitescores,PC1=ds.bac.pcoasitescores$PC1, PC2=ds.bac.pcoasitescores$PC2, State=ds.met.rare$State, Clone=ds.met.rare$Clone,group=ds.met.rare$Group)
#This is where you make confidence ellipses. I don't know what all the code means. Just know where to plug in my objects.
ds.bac.pcoaellipse<-ordiellipse(ds.bac.pcoasitescores,ds.bac.pcoagraph$State, display="sites", kind="sd", draw="none")
df_ell.bark16s <- data.frame()
for(g in levels(ds.bac.pcoagraph$State)){
df_ell.bark16s <- rbind(df_ell.bark16s, cbind(as.data.frame(with(ds.bac.pcoagraph[ds.bac.pcoagraph$State==g,],                                                vegan:::veganCovEllipse(ds.bac.pcoaellipse[[g]]$cov,ds.bac.pcoaellipse[[g]]$center,ds.bac.pcoaellipse[[g]]$scale))) ,State=g))}
#Plot PCoA in ggplot
library(ggplot2)
ds.pcoa<-ggplot(ds.bac.pcoagraph, aes(PC1,PC2))+
#geom_text(aes(label=group))+
geom_path(data=df_ell.bark16s, aes(x=PC1, y=PC2, colour=State),size=0.5, linetype=1)+
geom_point(aes(shape=Clone,colour=State), size=3.5)+
xlab("PC1 (32.0%)")+
ylab("PC2 (12.4%)")+
theme(axis.title.x=element_text(size=14, face="bold"))+
theme(axis.title.y=element_text(size=14, face="bold"))+
theme(axis.text.x=element_text(size=12, face="bold"))+
theme(axis.text.y=element_text(size=12, face="bold"))+
scale_color_manual(values=c("#006600","#3399FF","#FF9900"))+
geom_text(aes(x=-0.60, y=0.60, label="Caulosphere: 16S"),hjust=0,colour="black")+
scale_shape_manual(values=c(16,10,8,7,0,2))+
scale_x_continuous(breaks=c(-0.60,-0.30,0,0.30,0.60),limits=c(-0.60,0.60))+
scale_y_continuous(breaks=c(-0.60,-0.30,0,0.30,0.60),limits=c(-.60,.60))+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_rect(colour="black", size=1, fill=NA))+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.background = element_blank(),
panel.border=element_rect(color="black", size=1, fill=NA))
ds.pcoa
#ggsave(filename = "16s_drillshavings_pcoa.png", plot(ds.pcoa),dpi=300)
?pcoa
