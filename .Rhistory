plot(new.data.frame$Species, new.data.frame$Total, lty='n')
# make the plot lineas instead of points
plot(new.data.frame$Species, new.data.frame$Total, las=2)
# make the plot lineas instead of points
plot(new.data.frame$Species, new.data.frame$Total, las=2, ylab="Log abundance", cex=).5
# make the plot lineas instead of points
plot(new.data.frame$Species, new.data.frame$Total, las=2, ylab="Log abundance", cex=.5)
# make the plot lineas instead of points
plot(new.data.frame$Species, new.data.frame$Total, las=2, ylab="Log abundance", cex=.25)
plot(new.data.frame$Species, new.data.frame$Total, las=2, ylab="Log abundance")
# make the plot lineas instead of points
plot(new.data.frame$Species, new.data.frame$Total, las=2, ylab="Log abundance", cex.axis=0.25)
# make the plot lineas instead of points
plot(new.data.frame$Species, new.data.frame$Total, las=2, ylab="Log abundance", cex.axis=0.5)
par(cex=1)
# make the plot lineas instead of points
plot(new.data.frame$Species, new.data.frame$Total, las=2, ylab="Log abundance", cex.axis=0.5)
# make the plot lineas instead of points
plot(new.data.frame$Species, new.data.frame$Total, las=2, ylab="Log abundance", xlab="Species", cex.axis=0.5)
# make the plot lineas instead of points
par(mar=c(5,2,2,2))
plot(new.data.frame$Species, new.data.frame$Total, las=2, ylab="Log abundance", xlab="Species", cex.axis=0.5)
# make the plot lineas instead of points
par(mar=c(10,5,5,5))
plot(new.data.frame$Species, new.data.frame$Total, las=2, ylab="Log abundance", xlab="Species", cex.axis=0.5)
plot(new.data.frame$Species, new.data.frame$Total, las=2, ylab="Log abundance", cex.axis=0.5)
plot(new.data.frame$Species, new.data.frame$Total, las=2, ylab="Log abundance", xlab="", cex.axis=0.5)
plot(new.data.frame$Species, new.data.frame$Total, las=2, ylab="Log abundance", xlab="", cex.axis=0.5, lty=1)
plot(new.data.frame$Species, log(new.data.frame$Total), las=2, ylab="Log abundance", xlab="", cex.axis=0.5)
# you can add a line to the existing plot with lines() which has the same
lines(new.data.frame$Species, log(new.data.frame$Total)
# you can add a line to the existing plot with lines() which has the same
lines(new.data.frame$Species, log(new.data.frame$Total))
# you can add a line to the existing plot with lines() which has the same
lines(new.data.frame$Species, log(new.data.frame$Total))
plot(new.data.frame$Species, log(new.data.frame$Total), las=2, ylab="Log abundance", xlab="", cex.axis=0.5)
# you can add a line to the existing plot with lines() which has the same
lines(new.data.frame$Species, log(new.data.frame$Total))
plot(new.data.frame$Species, new.data.frame$Total)
plot(ordered.data$Species, log(ordered.data$Total)) ### thats not what we want
# Run this command again to re-order the data frame, which now has the factor levels in the proper order
ordered.data <- orderBy(~ -Total, new.data.frame)
plot(ordered.data$Species, log(ordered.data$Total)) ### thats not what we want
plot(ordered.data$Species, log(ordered.data$Total), las=2, ylab="Log abundance", xlab="", cex.axis=0.5) lines(ordered.data$Species, log(ordered.data$Total)
plot(ordered.data$Species, log(ordered.data$Total), las=2, ylab="Log abundance", xlab="", cex.axis=0.5)
lines(ordered.data$Species, log(ordered.data$Total)
lines(ordered.data$Species, log(ordered.data$Total))
ordered.data
rowMeans
beetles
log(0)
head(beetles)
names(beetles)
sum(beetles[,-c(1,2)])
rowSums(beetles[,-c(1,2)])
beetles$Total <- rowSums(beetles[,-c(1,2)])
summary(beetles)
beetles <- read.csv("WillGinzEnvEnt2019.Fall.csv")
names(beetles)
sum(beetles[,-c(1,2)])
rowSums(beetles[,-c(1,2)])
beetles$Total <- rowSums(beetles[,-c(1,2)])
summary(beetles)
library(doBy)
#install.packages('reshape2')
library(reshape2)
melt.beetles <- melt(beetles)
head(melt.beetles)
summaryBy(. ~ Species + family, data = melt.beetles, FUN = sum)
summary.beetles <- summaryBy(. ~ Species, data = melt.beetles, FUN = c(sum, mean, sd, min, max, length))
head(summary.beetles)
summaryBy(. ~ family, data = melt.beetles, FUN = c(mean, sd, min, max, length))
# First, check that the rows are in the same order with dim() and rownames()
summary.beetles$Species
beetles$Species
# We can put them in the right order using rownames
rownames(summary.beetles) <- summary.beetles$Species
summary.beetles[beetles$Species,] ## look at the output to check they line up
# We don't need the Species column becausethatwouldbe redundant
new.data.frame <- cbind(beetles, summary.beetles[beetles$Species,-1])
new.data.frame
str(beetles)
# try to plot species abundance curve
ordered.data <- orderBy(~ -Total, new.data.frame)
# re order its levels with `factor(levels =)`
new.data.frame$Species <- factor(new.data.frame$Species, levels = orderBy(~ -Total, new.data.frame)$Species)
# Run this command again to re-order the data frame, which now has the factor levels in the proper order
ordered.data <- orderBy(~ -Total, new.data.frame)
plot(ordered.data$Species, log(ordered.data$Total), las=2, ylab="Log abundance", xlab="", cex.axis=0.5)
lines(ordered.data$Species, log(ordered.data$Total))
ordered.data
ordered.data$se <- ordered.data$value.sd /  ordered.data$value.length
ordered.data$se
ordered.data$se <- ordered.data$value.sd /  sqrt(ordered.data$value.length)
ordered.data$mean.log <- log(ordered.data$mean)
ordered.data$mean
ordered.data$mean.log <- log(ordered.data$value.mean)
ordered.data$mean.log
ordered.data$mean.minus.se <- log(ordered.data$value.mean - ordered.data$se)
ordered.data$mean.plus.se <- log(ordered.data$value.mean + ordered.data$se)
ordered.data$mean.plus.se
ordered.data$mean.minus.se
ordered.data$mean.log
ordered.data$mean.minus.sd <- log(ordered.data$value.mean - ordered.data$value.sd)
ordered.data$mean.plus.sd <- log(ordered.data$value.mean + ordered.data$value.sd)
ordered.data$mean.minus.sd
ordered.data$mean.plus.sd
# Run this command again to re-order the data frame, which now has the factor levels in the proper order
ordered.data <- orderBy(~ -Total, new.data.frame)
ordered.data$se <- ordered.data$value.sd /  sqrt(ordered.data$value.length)
ordered.data$mean.log <- log(ordered.data$value.mean)
ordered.data$mean.minus.se.log <- log(ordered.data$value.mean - ordered.data$se)
ordered.data$mean.plus.se.log <- log(ordered.data$value.mean + ordered.data$se)
plot(ordered.data$Species, log(ordered.data$mean.log), las=2, ylab="Log abundance", xlab="", cex.axis=0.5)
plot(ordered.data$Species, ordered.data$mean.log, las=2, ylab="Log abundance", xlab="", cex.axis=0.5)
lines(ordered.data$Species, ordered.data$mean.minus.se.log, color="blue")
plot(ordered.data$Species, ordered.data$mean.log, las=2, ylab="Log abundance", xlab="", cex.axis=0.5)
lines(ordered.data$Species, ordered.data$mean.log)
lines(ordered.data$Species, ordered.data$mean.minus.se.log, col="blue")
lines(ordered.data$Species, ordered.data$mean.minus.se.log, col="blue", lty=2)
plot(ordered.data$Species, ordered.data$mean.log, las=2, ylab="Log abundance", xlab="", cex.axis=0.5)
lines(ordered.data$Species, ordered.data$mean.log)
lines(ordered.data$Species, ordered.data$mean.minus.se.log, col="blue", lty=2)
lines(ordered.data$Species, ordered.data$mean.plus.se.log, col="blue", lty=2)
# Make the columns
ordered.data$se <- ordered.data$value.sd /  sqrt(ordered.data$value.length)
ordered.data$mean.log <- log(ordered.data$value.mean)
ordered.data$mean.minus.se.log <- log(ordered.data$value.mean - ordered.data$se)
ordered.data$mean.plus.se.log <- log(ordered.data$value.mean + ordered.data$se)
# Plot it
plot(ordered.data$Species, ordered.data$mean.log, las=2, ylab="Log (mean +/- SE)", xlab="", cex.axis=0.5)
lines(ordered.data$Species, ordered.data$mean.log)
lines(ordered.data$Species, ordered.data$mean.minus.se.log, col="blue", lty=2)
lines(ordered.data$Species, ordered.data$mean.plus.se.log, col="blue", lty=2)
legend("topright", legend = c("Mean", "+/- SE"), lty=c(1,2), col=c("black","blue"))
## Mathematical operations
5 + 6
5 / 6
5 %/% 6 # Just the numerator
5 %% 6  # Modulo
6 %% 5  # Modulo
10 %% 5 # Modulo
## Logical operations
5 < 6
5 < 5
5 <= 5
TRUE & FALSE
TRUE | FALSE
FALSE | FALSE
## Use of parentheses
(5 + 5) / 2 >= 6
# make some objects
obj  <- 5
blah <- 6
my.little.pony <- 10
# do stuff with them
obj + blah
my.little.pony * blah
obj < blah
# replace some of your objects with new obj
obj <- obj + 1
obj
obj <- obj + 1
obj
# if you mess up, R is too stupid to figure  it out
my.littl.pony * blah
# Make some logical and character objects
isfivelessthanfive <- 5 < 5
isfivelessthanfive
whatismyname <- "Geoff"
whatisyourname <- "Scott"
name2 <- "Scott"
whatismyname == whatisyourname
name2 == whatisyourname
class(isfivelessthanfive)
class(name2)
class(blah)
# functions are special types of objects
class(class)
# Make vectors
digits <- c(3,1,4,1,5,9)
people <- c("Brian", "Evan", "Lynne", "Geoff")
# See what inputs in there and how long
digits
length(digits)
# Add to the vector
digits <- c(digits, 2)
digits
length(digits)
c(people, "Nick")
people[1]
people[3]
digits[6]
digits[7]
digits[8]
digits[c(1,2)]
digits[c(1,2,3)]
# We can perform operations on vectors, and they apply to all the members
digits
digits + 1
digits * 2
digits[8] + 1
1:10
1:10 / 2
1:20 - 1
# Create the matrix
my.matrix <- matrix(nrow=3, ncol=3)
my.matrix
# Populate the matrix
my.matrix[,] <- c(1,1,1,2,2,2,3,3,3)
my.matrix
# Change the 3rd row of the matrix
my.matrix[3,] <- c(4,5,6)
my.matrix
# Use indices to access values in the matrix
my.matrix[1,1]
my.matrix[1,2]
my.matrix[3,1]
# Get a row
my.matrix[,2]
# Get a column
my.matrix[,3]
# Second and third values of second column
my.matrix[2:3,2]
?matrix
## If you type in matrix() with no arguments, you get a 1-by-1 matrix containing NA
matrix()
## If you specify byrow = T, you can populate the matrix by row instead of by column
people
matrix(people, 2, 2)
matrix(people, 2, 2, TRUE)
# You can make matrices of characters or logicals as well
ppl.matrix <- matrix(people, 2, 2)
ppl.matrix
is.brian <- matrix(people == "Brian", 2, 2)
is.brian
# When you pass a logical to a matrix or vector of the same length, R returns the values for which the input was TRUE
ppl.matrix[is.brian]
# You can do the same with a vector
digits
digits == 9
digits[digits == 9]
# Or you can use the which() command to store the indices for which the logical expression is TRUE
which(digits == 1)
i <- which(digits == 1)
j <- which(digits > 1)
digits
digits[i]
digits[j]
colnames(ppl.matrix)<-c('Teenagers', 'Adults')
ppl.matrix
# Call the column of Xavier alumni
ppl.matrix[, "Adults"]
which(ppl.matrix=="Geoff")
which(ppl.matrix=="Geoff", arr.ind=T)
ppl.matrix
All.the.stuff <- list()
All.the.stuff$digs <- digits
All.the.stuff[['ppl']]  <- people
All.the.stuff$ppl.mat <- ppl.matrix
# You can even put a function in a list
All.the.stuff$f <- colnames
All.the.stuff$ppl.mat
All.the.stuff$ppl
All.the.stuff$f
# Create a new dataframe
new.one <- data.frame(ppl = people, numbers = digits[1:4])
new.one
new.one$numbers
# Add a new column
new.one$lastname <- c("Rago", "Rago", "Frederickson", "Williams")
new.one$job <- c("College", "Highschool", "Real job", "Grad student")
new.one
paste(new.one$ppl[1], new.one$ppl[2], new.one$ppl[3])
paste(new.one$ppl[1], new.one$ppl[2], new.one$ppl[3], sep = " and ")
# The 'collapse' argument allows you to give a vector
paste(new.one$ppl[1:3], collapse=" and ")
paste(new.one$ppl, collapse=" and ")
## new.one$numbers is a numeric
class(new.one$numbers)
## enter a number as input on the command prompt and see what happened
new.one$numbers[1] <- readline()
class(new.one$numbers)
## now do the same thing but enter a character
new.one$numbers[1] <- readline()
class(new.one$numbers)
new.one
grep("Rago", new.one$lastname)
grep("Rago", new.one$lastname)
# If you give it a matrix or data frame, grep returns the number of the matching
columns <- grep("ll", new.one)
new.one[,columns]
rows <- grep("ll", new.one[,columns[1]])
new.one[rows, columns[1]]
rows2 <- grep("ll", new.one[,columns[2]])
new.one[rows2, columns[2]]
getwd()
setwd("/Users/will1809/OneDrive/R Workshop")
beetles <- read.csv("WillGinzEnvEnt2019.Fall.csv")
head(beetles)
names(beetles)
sum(beetles[,-c(1,2)])
rowSums(beetles[,-c(1,2)])
beetles$Total <- rowSums(beetles[,-c(1,2)])
summary(beetles)
#install.packages('doBy')
library(doBy)
#install.packages('reshape2')
library(reshape2)
melt.beetles <- melt(beetles)
head(melt.beetles)
summaryBy(. ~ Species + family, data = melt.beetles, FUN = sum)
summary.beetles <- summaryBy(. ~ Species, data = melt.beetles, FUN = c(sum, mean, sd, min, max, length))
head(summary.beetles)
summaryBy(. ~ family, data = melt.beetles, FUN = c(mean, sd, min, max, length))
What if we wanted to add this information to our originial data frame? we can use the function `cbind()`.
# First, check that the rows are in the same order with dim() and rownames()
summary.beetles$Species
beetles$Species
# We can put them in the right order using rownames
rownames(summary.beetles) <- summary.beetles$Species
summary.beetles[beetles$Species,] ## look at the output to check they line up
# We don't need the Species column becausethatwouldbe redundant
new.data.frame <- cbind(beetles, summary.beetles[beetles$Species,-1])
new.data.frame
# write to a file with write.csv
write.csv(new.data.frame, "Beetles.summary.csv")
str(beetles)
library(doBy)
# sort data frame in decreasing order
head(orderBy(~ -Total, new.data.frame))
tail(orderBy(~ -Total, new.data.frame))
# try to plot species abundance curve
ordered.data <- orderBy(~ -Total, new.data.frame)
plot(ordered.data$Species, log(ordered.data$Total)) ### thats not what we want
# re order its levels with `factor(levels =)`
new.data.frame$Species <- factor(new.data.frame$Species, levels = orderBy(~ -Total, new.data.frame)$Species)
plot(new.data.frame$Species, new.data.frame$Total)
# make the plot lineas instead of points
par(mar=c(10,5,5,5))
plot(new.data.frame$Species, log(new.data.frame$Total), las=2, ylab="Log abundance", xlab="", cex.axis=0.5)
# you can add a line to the existing plot with lines() which has the same
lines(new.data.frame$Species, log(new.data.frame$Total))
Note that even though the plot was plotted with the x axis in the correct order, the points are drawn in the order of the original data.frame. To get around this, we'll also have to reorder the data.frame.
# Run this command again to re-order the data frame, which now has the factor levels in the proper order
ordered.data <- orderBy(~ -Total, new.data.frame)
plot(ordered.data$Species, log(ordered.data$Total), las=2, ylab="Log abundance", xlab="", cex.axis=0.5)
lines(ordered.data$Species, log(ordered.data$Total))
## Excercise
#> Start a new script with File > New File > R Script if you are in RStudio or File > New Document in R
#> Plot the log mean +/- sd of the beetle species (in order) using the function `plot`
#+ Read in the original data
#+ Make a new column with mean + standard error
#+ Make a new column with mean - standard error
#+ Log-transform the three new columns
#+ Plot the log mean
#+ Add dotted lines in different colors (`?par`) for log  mean +/- SE
#+ Add a legend with this code
legend("topright", legend = c("Mean", "+/- SE"), lty=c(1,2), col=c("black","blue"))
Note that even though the plot was plotted with the x axis in the correct order, the points are drawn in the order of the original data.frame. To get around this, we'll also have to reorder the data.frame.
# Run this command again to re-order the data frame, which now has the factor levels in the proper order
ordered.data <- orderBy(~ -Total, new.data.frame)
plot(ordered.data$Species, log(ordered.data$Total), las=2, ylab="Log abundance", xlab="", cex.axis=0.5)
lines(ordered.data$Species, log(ordered.data$Total))
## Excercise
#> Start a new script with File > New File > R Script if you are in RStudio or File > New Document in R
#> Plot the log mean +/- sd of the beetle species (in order) using the function `plot`
#+ Read in the original data
#+ Make a new column with mean + standard error
#+ Make a new column with mean - standard error
#+ Log-transform the three new columns
#+ Plot the log mean
#+ Add dotted lines in different colors (`?par`) for log  mean +/- SE
#+ Add a legend with this code
legend("topright", legend = c("Mean", "+/- SE"), lty=c(1,2), col=c("black","blue"))
Note that even though the plot was plotted with the x axis in the correct order, the points are drawn in the order of the original data.frame. To get around this, we'll also have to reorder the data.frame.
# Run this command again to re-order the data frame, which now has the factor levels in the proper order
ordered.data <- orderBy(~ -Total, new.data.frame)
plot(ordered.data$Species, log(ordered.data$Total), las=2, ylab="Log abundance", xlab="", cex.axis=0.5)
lines(ordered.data$Species, log(ordered.data$Total))
## Excercise
#> Start a new script with File > New File > R Script if you are in RStudio or File > New Document in R
#> Plot the log mean +/- sd of the beetle species (in order) using the function `plot`
#+ Read in the original data
#+ Make a new column with mean + standard error
#+ Make a new column with mean - standard error
#+ Log-transform the three new columns
#+ Plot the log mean
#+ Add dotted lines in different colors (`?par`) for log  mean +/- SE
#+ Add a legend with this code
legend("topright", legend = c("Mean", "+/- SE"), lty=c(1,2), col=c("black","blue"))
Note that even though the plot was plotted with the x axis in the correct order, the points are drawn in the order of the original data.frame. To get around this, we'll also have to reorder the data.frame.
# Run this command again to re-order the data frame, which now has the factor levels in the proper order
ordered.data <- orderBy(~ -Total, new.data.frame)
plot(ordered.data$Species, log(ordered.data$Total), las=2, ylab="Log abundance", xlab="", cex.axis=0.5)
lines(ordered.data$Species, log(ordered.data$Total))
## Excercise
#> Start a new script with File > New File > R Script if you are in RStudio or File > New Document in R
#> Plot the log mean +/- sd of the beetle species (in order) using the function `plot`
#+ Read in the original data
#+ Make a new column with mean + standard error
#+ Make a new column with mean - standard error
#+ Log-transform the three new columns
#+ Plot the log mean
#+ Add dotted lines in different colors (`?par`) for log  mean +/- SE
#+ Add a legend with this code
legend("topright", legend = c("Mean", "+/- SE"), lty=c(1,2), col=c("black","blue"))
Note that even though the plot was plotted with the x axis in the correct order, the points are drawn in the order of the original data.frame. To get around this, we'll also have to reorder the data.frame.
# Run this command again to re-order the data frame, which now has the factor levels in the proper order
ordered.data <- orderBy(~ -Total, new.data.frame)
plot(ordered.data$Species, log(ordered.data$Total), las=2, ylab="Log abundance", xlab="", cex.axis=0.5)
lines(ordered.data$Species, log(ordered.data$Total))
## Excercise
#> Start a new script with File > New File > R Script if you are in RStudio or File > New Document in R
#> Plot the log mean +/- sd of the beetle species (in order) using the function `plot`
#+ Read in the original data
#+ Make a new column with mean + standard error
#+ Make a new column with mean - standard error
#+ Log-transform the three new columns
#+ Plot the log mean
#+ Add dotted lines in different colors (`?par`) for log  mean +/- SE
#+ Add a legend with this code
legend("topright", legend = c("Mean", "+/- SE"), lty=c(1,2), col=c("black","blue"))
Note that even though the plot was plotted with the x axis in the correct order, the points are drawn in the order of the original data.frame. To get around this, we'll also have to reorder the data.frame.
# Run this command again to re-order the data frame, which now has the factor levels in the proper order
ordered.data <- orderBy(~ -Total, new.data.frame)
plot(ordered.data$Species, log(ordered.data$Total), las=2, ylab="Log abundance", xlab="", cex.axis=0.5)
lines(ordered.data$Species, log(ordered.data$Total))
## Excercise
#> Start a new script with File > New File > R Script if you are in RStudio or File > New Document in R
#> Plot the log mean +/- sd of the beetle species (in order) using the function `plot`
#+ Read in the original data
#+ Make a new column with mean + standard error
#+ Make a new column with mean - standard error
#+ Log-transform the three new columns
#+ Plot the log mean
#+ Add dotted lines in different colors (`?par`) for log  mean +/- SE
#+ Add a legend with this code
legend("topright", legend = c("Mean", "+/- SE"), lty=c(1,2), col=c("black","blue"))
Note that even though the plot was plotted with the x axis in the correct order, the points are drawn in the order of the original data.frame. To get around this, we'll also have to reorder the data.frame.
# Run this command again to re-order the data frame, which now has the factor levels in the proper order
ordered.data <- orderBy(~ -Total, new.data.frame)
plot(ordered.data$Species, log(ordered.data$Total), las=2, ylab="Log abundance", xlab="", cex.axis=0.5)
lines(ordered.data$Species, log(ordered.data$Total))
## Excercise
#> Start a new script with File > New File > R Script if you are in RStudio or File > New Document in R
#> Plot the log mean +/- sd of the beetle species (in order) using the function `plot`
#+ Read in the original data
#+ Make a new column with mean + standard error
#+ Make a new column with mean - standard error
#+ Log-transform the three new columns
#+ Plot the log mean
#+ Add dotted lines in different colors (`?par`) for log  mean +/- SE
#+ Add a legend with this code
legend("topright", legend = c("Mean", "+/- SE"), lty=c(1,2), col=c("black","blue"))
# The purpose of this script is to provide tools to explore OTU relationships and abundance of individual taxa in the dataset
library(tidyverse)
library(phyloseq)
library(vegan)
# This function queries a subset of the merged bacterial/fungal dataset by a chosen
# taxonomic level (taxlevel) and the name of the taxon of interest (taxstring).
# It also takes a phyloseq object (pseq).
custom.otu.tax.tbl <- function(pseq, taxlevel, taxstring) {
onames <- tax_table(pseq)[,taxlevel] %in% taxstring
rs <- rownames(tax_table(pseq))[onames]
if (length(rs) < 1) {
return(NULL)
} else {
mtable <- otu_table(pseq)[onames] %>% cbind (tax_table(pseq)[onames], .) %>% t()
return(mtable)
}
}
# This function queries the network analysis results for a specified p and r
# cutoff for which a correlation table was generated and gives the taxonomic
# identity of OTUs with significant spearman correlations to G. morbida.
gm.correlations <- function(pseq, pcut, rcut) {
correlation.network <- read.csv(paste("Net.analysis/CorrNetworks.WA/cyto.shavings.merged.p.", pcut, ".r.", rcut,".txt", sep = ''), sep='\t')
head(correlation.network)
v2 <- correlation.network[correlation.network$Var1 == "Otu0115",c('Var2','r','p')]
v1 <- correlation.network[correlation.network$Var2 == "Otu0115",c('Var1','r','p')]
return(rbind(tax_table(pseq)[as.character(v2$Var2)] %>% cbind (v2[,2:3]), tax_table(pseq)[as.character(v1$Var1)] %>% cbind (v1[,2:3])))
}
load("R_Environments/Jnigra.microbiome.merged.WilliamsOnufrak.RData")
#Correlated OTUs to G. morbida in network analysis
gm.correlations(shavings.merge, 0.005, 0.6)
gm.correlations(shavings.merge, 0.05, 0.8)
gm.correlations(shavings.merge, 0.01, 0.8)
gm.correlations(shavings.merge, 0.005, 0.8)
setwd("~/OneDrive - purdue.edu/TCD microbiome spring 2017/Aaron Manuscript/Geoff_Final_RFiles/Juglans.microbiome.github")
load("R_Environments/Jnigra.microbiome.merged.WilliamsOnufrak.RData")
gm.correlations(shavings.merge, 0.005, 0.6)
gm.correlations(shavings.merge, 0.05, 0.8)
gm.correlations(shavings.merge, 0.01, 0.8)
gm.correlations(shavings.merge, 0.005, 0.8)
gm.correlations(shavings.merge, 0.005, 0.6) %>% write.csv("Net.analysis/Gm.corrOTUs.shavings.p0.005.r0.6.csv", quote=F, sep="	", row.names=F)
gm.correlations(shavings.merge, 0.05, 0.8)  %>% write.csv("Net.analysis/Gm.corrOTUs.shavings.p0.005.r0.6.csv", quote=F, sep="	", row.names=F)
gm.correlations(shavings.merge, 0.01, 0.8)  %>% write.csv("Net.analysis/Gm.corrOTUs.shavings.p0.005.r0.6.csv", quote=F, sep="	", row.names=F)
gm.correlations(shavings.merge, 0.005, 0.8) %>% write.csv("Net.analysis/Gm.corrOTUs.shavings.p0.005.r0.6.csv", quote=F, sep="	", row.names=F)
gm.correlations(shavings.merge, 0.005, 0.6) %>% write.table("Net.analysis/Gm.corrOTUs.shavings.p0.005.r0.6.tsv", quote=F, sep="	", row.names=F)
gm.correlations(shavings.merge, 0.05, 0.8)  %>% write.table("Net.analysis/Gm.corrOTUs.shavings.p0.005.r0.6.tsv", quote=F, sep="	", row.names=F)
gm.correlations(shavings.merge, 0.01, 0.8)  %>% write.table("Net.analysis/Gm.corrOTUs.shavings.p0.005.r0.6.tsv", quote=F, sep="	", row.names=F)
gm.correlations(shavings.merge, 0.005, 0.8) %>% write.table("Net.analysis/Gm.corrOTUs.shavings.p0.005.r0.6.tsv", quote=F, sep="	", row.names=F)
gm.correlations(shavings.merge, 0.005, 0.6) %>% write.table("Net.analysis/Gm.corrOTUs.shavings.p0.005.r0.6.tsv", quote=F, sep="	", row.names=F)
gm.correlations(shavings.merge, 0.05, 0.8)  %>% write.table("Net.analysis/Gm.corrOTUs.shavings.p0.05.r0.8.tsv", quote=F, sep="	", row.names=F)
gm.correlations(shavings.merge, 0.01, 0.8)  %>% write.table("Net.analysis/Gm.corrOTUs.shavings.p0.01.r0.8.tsv", quote=F, sep="	", row.names=F)
gm.correlations(shavings.merge, 0.005, 0.8) %>% write.table("Net.analysis/Gm.corrOTUs.shavings.p0.005.r0.8.tsv", quote=F, sep="	", row.names=F)
gm.correlations(shavings.merge, 0.005, 0.6) %>% write.table("Net.analysis/Gm.corrOTUs.shavings.p0.005.r0.6.tsv", quote=F, sep="	", row.names=T)
gm.correlations(shavings.merge, 0.05, 0.8)  %>% write.table("Net.analysis/Gm.corrOTUs.shavings.p0.05.r0.8.tsv", quote=F, sep="	", row.names=T)
gm.correlations(shavings.merge, 0.01, 0.8)  %>% write.table("Net.analysis/Gm.corrOTUs.shavings.p0.01.r0.8.tsv", quote=F, sep="	", row.names=T)
gm.correlations(shavings.merge, 0.005, 0.8) %>% write.table("Net.analysis/Gm.corrOTUs.shavings.p0.005.r0.8.tsv", quote=F, sep="	", row.names=T)
?write.table
getwd()
