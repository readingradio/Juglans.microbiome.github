r
c
I; c#
I%*%c # 3x3 * 3x1 = 3x1 vector for solution (3 inner products)
c%*%I  # Error! 3x1 * 3x3 is not conformable; can't multiply
I; A#
I%*%A
I[2,2] <- 2		# change value of element [2,2] in I; note square brackets#
I; A#
A%*%I     # Get error message: non-conformable arguments (b/c [3x2] x [3x3] not possible)#
I%*%A
crossprod(I,A) # try crossprod(A, I), where A*I is not conformable#
##
#  Inverse of a matrix#
A <- matrix(c(3,-6,2,-5),2,2,byrow=TRUE)#
A#
solve(A)		# solves for the inverse of A (elements are multiples)#
            # check - does the inverse multiplied by the original yield an identity matrix?#
solve(A) %*% A
install.packages('lawn')
library("lawn")#
lawn_bbox_polygon(c(-122.2047, 47.5204, -122.1065, 47.6139)) %>% view
install.packages('leaflet')
library('leaflet')
lawn_bbox_polygon(c(-122.2047, 47.5204, -122.1065, 47.6139)) %>% view
lawn_bbox_polygon(c(46.591169, -118.535378, 45.741266, -116.686558)) %>% view
lawn_bbox_polygon(c(-118.535378, 46.591169, -116.686558, 45.741266)) %>% view
lawn_bbox_polygon(c(-119, 46.591169, -116.686558, 45.741266)) %>% view
lawn_bbox_polygon(c(-118.535378, 47, -116.686558, 45.741266)) %>% view
lawn_bbox_polygon(c(-119, 47, -116.686558, 45.741266)) %>% view
ncdc_stations(extent =c(-119, 47, -116.686558, 45.741266))
library('rnoaa')
ncdc_stations(extent =c(-119, 47, -116.686558, 45.741266))
?token
?rnoaa
ncdc_stations(extent =c(-119, 47, -116.686558, 45.741266))
?ncdc_stations
ncdc_stations(extent =c(-119, 47, -116.686558, 45.741266), token='wTFkCIjQSaRynGTPpQQGGjZqnTwZlIxJ')
ncdc_stations(extent = c(47.5204, -122.2047, 47.6139, -122.1065), token='wTFkCIjQSaRynGTPpQQGGjZqnTwZlIxJ')
ncdc_stations(extent = c(45.741266, -119, 45.741266, -116.686558), token='wTFkCIjQSaRynGTPpQQGGjZqnTwZlIxJ')
ncdc_stations(extent = c(45.741266, -119, 47, -116.686558), token='wTFkCIjQSaRynGTPpQQGGjZqnTwZlIxJ')47
ncdc_stations(extent = c(45.741266, -119, 47, -116.686558), token='wTFkCIjQSaRynGTPpQQGGjZqnTwZlIxJ')
homr(state = 'WA')
stati <- data(ncdc_stations(extent = c(45.741266, -119, 47, -116.686558), token='wTFkCIjQSaRynGTPpQQGGjZqnTwZlIxJ'), limit=100)
stati <- data(ncdc_stations(extent = c(45.741266, -119, 47, -116.686558), token='wTFkCIjQSaRynGTPpQQGGjZqnTwZlIxJ', limit=100))
stati <- ncdc_stations(extent = c(45.741266, -119, 47, -116.686558), token='wTFkCIjQSaRynGTPpQQGGjZqnTwZlIxJ', limit=100)
stati
stati$id
stati$data$id
?ncdc
get_GSOD()
library(GSODR)
install.packages('GSODR')
install.packages('gsod')
install.packages("gsod", repos="http://R-Forge.R-project.org")
library(gsod)
help(gsod)
data(stations)
stations
library(ggplot)
library(ggplot2)
library(tidyr)#
library(vegan)#
#
#First I import the whole OTU table I recieved from Mothur. Note at this point taxonomy is not included, it is just raw OTU counts (columns) by sample or group (rows). Below I indicate that the row.names are in column 2 of the imported file. #
bigfile.sample<-read.table("/Users/will1809/OneDrive - purdue.edu/TCD microbiome spring 2017/Results.sep.2019/Caulo.ITS/Spr2017OTU.Jan2018.opti_mcc.branch.shared",header=TRUE,sep="\t",fill=TRUE,strip.white=TRUE, row.names=2)#
#
rownames(bigfile.sample) <- rownames(bigfile.sample) %>% sub('s_S.+', '', ., perl=T)#
#Next I import the metadata for the particular habitat of interest. In this case I am working with drill shavings. I will use this metadata to subset the larger OTU file above. #
source('/Users/will1809/OneDrive - purdue.edu/TCD microbiome spring 2017/Results.sep.2019/Caulo.ITS/baxter.sept2019.R')#
ds.met<- get_metadata()#
#Next I import the taxonomy file. This contains the taxonomy assignments for all OTUs in the study and not just the ones for the particuluar habitat of interest. This will get subset as well. #
taxonomy<-read.table("/Users/will1809/OneDrive - purdue.edu/TCD microbiome spring 2017/Results.sep.2019/Caulo.ITS/jnits.trim.contigs.good.unique.precluster.pick.pick.opti_mcc.0.02.cons.taxonomy",header=TRUE,sep="\t",fill=TRUE,strip.white=TRUE,row.names=1)#
ds.names<-ds.met$Group[ds.met$Type=='BranchBark'] %>% sub('s$', '', ., perl=T)#
#
# added this to deal with sample name issue#
# its confusing but it works#
ds.met2 <- ds.met[ds.met$Type=='BranchBark',]#
#
cbind(ds.met2$Group, ds.names)#
#
ds.met2$sample.name.2 <- ds.names#
#
ds.met2[,c('sample.name.2','Group')]#
#Here I use the subset function to pull out just the samples belonging to drill shavings. #
ds<-subset(bigfile.sample, rownames(bigfile.sample) %in% ds.names)#
dim(ds)#
dspure<- ds[,colSums(ds)>0]#
#Here I am further subsetting the data. I am removing some MOTHUR metadata that is useless.  #
dim(dspure)#
#
dspure[1:4,1:4]#
dspure[1:4,7829:7831]#
dspureotu<-dspure[,3:7831]#
#
dim(dspureotu)#
#Below I am reformatting the OTU table so that I can begin to filter and merge the taxonomy information. #
transdspure<-as.data.frame(t(dspureotu))#
#The below function is asking specifically for the OTU IDs. These are the row names. I will use these to subset the taxonomy file. #
transdspurelabs<-labels(transdspure)#
taxds<-subset(taxonomy, rownames(taxonomy) %in% transdspurelabs[[1]])#
taxdspure<-(taxds[,2])#
#Below I am using the separate function from tidyr to split the taxonomy strings into columns by semi-colon so that I can rename the OTUs to give them more meaning for downstream analyses.#
taxonomylabs<-c("kingdom","phylum","class","order","family","genus","species")#
otutabtaxds<-data.frame(taxonomy=taxdspure,transdspure)#
otutabtaxdssep<-separate(otutabtaxds,into=taxonomylabs,col=taxonomy,sep=";")#
head(otutabtaxdssep)#
#Here I am renaming the OTUs using the make.names function. This will make the OTU name something more informative. I am using genus to do this. #
rownames(otutabtaxdssep)<-make.names(otutabtaxdssep$genus,unique=TRUE)#
rownames(otutabtaxdssep)#
head(otutabtaxdssep)#
#
dim(otutabtaxdssep)#
otutabtaxds<-otutabtaxdssep[,8:54] ### missing a sample#
renamotutabtaxds<-as.data.frame(t(otutabtaxds))#
#Rarefaction#
sort(rowSums(renamotutabtaxds[,1:7829]))#
#Here we are rarefying the data using the rrarefy function from vegan. I use the sort function above to determine the lowest number of sequences in a sample. #
## stopped here 7:33 pm July 25. 2019#
#
rareotuds<-as.data.frame(rrarefy(renamotutabtaxds, sample=3500))#
rareotuds<-as.data.frame(subset(rareotuds,rowSums(rareotuds)>3499))#
samples<-row.names(rareotuds)#
# Lost 1 sample#
#Relabundance calculation#
#relabundds <- rareotuds / 38000#
#
dim(rareotuds)#
rareotutabtaxds<-as.data.frame(rareotuds, total=rowSums(rareotuds[,1:7829]))#
rareotutabtaxds#
#
relabundds<-decostand(rareotutabtaxds, method="total")
pairs(relabundds)
pairs(relabundds[1:10,1:10])
relabundds[1:10,1:10]
pairs(relabundds[,1:10])
pairs(relabundds[,1:10], col=as.numeric(row.names(relabundds)))
row.names(relabundds)
as.numeric(row.names(relabundds))
pairs(relabundds[,1:10], col=as.numeric(as.vector(row.names(relabundds)))
pairs(relabundds[,1:10], col=as.numeric(as.vector(row.names(relabundds))))
pairs(relabundds[,1:10], col=as.numeric(row.names(relabundds[,1:10])))
pairs(relabundds[,1:10], col=as.numeric(row.names(relabundds)[,1:10]))
pairs(relabundds[,1:10], col=as.numeric(row.names(relabundds)))
iris<-cbind(row.names(relabundds),relabundds[,1:10])
iris
pairs(iris[,2:11], col=as.numeric(iris[,1]))
iris.dist<-vegdist(relabundds, method="euclid")
ds
ds.met
adonis(iris.dist ~ ds.met)
dim(iris.dist)
iris.dist<-vegdist(relabundds, method="euclid")
dim(iris.dist)
iris.dist
dims(iris.dist)
dim(iris.dist)
str(iris.dist)
ds.met
adonis(iris.dist ~ ds.met$Clone)
adonis(t(iris.dist) ~ ds.met$Clone)
hclust(iris.dist)
hplot(clust(iris.dist))
plot(hclust(iris.dist))
adonis(relabundds ~ ds.met$Clone)
dim(relabundds)
dim(ds.met)
ds.met2
dim(ds.met2)
ds.met2[,c('sample.name.2','Group')]
rownames(bigfile.sample) %in% ds.names
adonis(relabundds ~ ds.met2$Clone)
adonis(relabundds ~ ds.met2$Clone[-1])
ds.met2$sample.name2
ds.met2$sample.name.2
setideff(ds.met2$sample.name.2, row.names(relabundds))
setdiff(ds.met2$sample.name.2, row.names(relabundds))
relabundds <- relabunnds[-which(row.names(relabundds) == setdiff(ds.met2$sample.name.2, row.names(relabundds))),]
relabundds <- relabundds[-which(row.names(relabundds) == setdiff(ds.met2$sample.name.2, row.names(relabundds))),]
adonis(relabundds ~ ds.met2$Clone[-1])
adonis(relabundds ~ ds.met2$Clone)
dim(relabundds)
dim(ds.met2)
which(row.names(relabundds) == setdiff(ds.met2$sample.name.2, row.names(relabundds)))
relabundds<-decostand(rareotutabtaxds, method="total")
setdiff(ds.met2$sample.name.2, row.names(relabundds))
which(row.names(relabundds) == setdiff(ds.met2$sample.name.2, row.names(relabundds)))
row.names(relabundds)
ds.met2$sample.name.2
row.names(relabundds) == setdiff(ds.met2$sample.name.2, row.names(relabundds)))
which(row.names(relabundds) == setdiff(ds.met2$sample.name.2, row.names(relabundds)))
row.names(relabundds) == setdiff(ds.met2$sample.name.2, row.names(relabundds))
row.names(relabundds) %in% setdiff(ds.met2$sample.name.2, row.names(relabundds))
setdiff(ds.met2$sample.name.2, row.names(relabundds))
missing<-setdiff(ds.met2$sample.name.2, row.names(relabundds))
which(row.names(relabundds) == missing)
row.names(relabundds)
ds.met3 <- ds.met2[-which(ds.met2$sample.name.2 == missing),]
adonis(relabundds ~ ds.met3$Clone)
adonis(relabundds ~ ds.met3$Group)
ds.met3$Group
adonis(relabundds ~ ds.met3$State)
plot(hclust(relabundds))
hclust(relabundds)
relabundds
iris.nmds <- metaMDS(relabundds)
mds.pts <- iris.nmds$points
iris.xy <- scores(mds.pts, display="sites")
plot(mds.pts)
points(iris.xy, col=as.numeric(ds.met3))
points(iris.xy, col=as.numeric(ds.met3$State))
iris.xy
points(iris.xy, col=as.numeric(ds.met3$State))
ds.met3$State
plot(mds.pts, col=as.numeric(ds.met3$State))
as.numeric(ds.met3$State)
ds.met3$State
as.numeric(ds.met3$State)
plot(mds.pts, col=as.numeric(as.factor(ds.met3$State)))
update
install.packages('knitr')
install.packages('rmarkdown')
readline()
words <- readline()
words
subject <- readline()
verb <- readline()
object <- readling()
object <- readline()
paste(subject, verb, object)
# The purpose of this script is to provide tools to explore OTU relationships and abundance of individual taxa in the dataset#
#
library(tidyverse)#
library(phyloseq)#
library(vegan)#
#
# This function queries a subset of the merged bacterial/fungal dataset by a chosen#
# taxonomic level (taxlevel) and the name of the taxon of interest (taxstring).#
# It also takes a phyloseq object (pseq).#
#
custom.otu.tax.tbl <- function(pseq, taxlevel, taxstring) {#
#
  onames <- tax_table(pseq)[,taxlevel] %in% taxstring#
#
  rs <- rownames(tax_table(pseq))[onames]#
#
  if (length(rs) < 1) {#
    return(NULL)#
  } else {#
    mtable <- otu_table(pseq)[onames] %>% cbind (tax_table(pseq)[onames], .) %>% t()#
    return(mtable)#
  }#
}#
#
# This function queries the network analysis results for a specified p and r#
# cutoff for which a correlation table was generated and gives the taxonomic#
# identity of OTUs with significant spearman correlations to G. morbida.#
#
gm.correlations <- function(pseq, pcut, rcut) {#
  correlation.network <- read.csv(paste("Net.analysis/CorrNetworks.WA/cyto.shavings.merged.p.", pcut, ".r.", rcut,".txt", sep = ''), sep='\t')#
  head(correlation.network)#
  v2 <- correlation.network[correlation.network$Var1 == "Otu0115",c('Var2','r','p')]#
  v1 <- correlation.network[correlation.network$Var2 == "Otu0115",c('Var1','r','p')]#
  return(rbind(tax_table(pseq)[as.character(v2$Var2)] %>% cbind (v2[,2:3]), tax_table(pseq)[as.character(v1$Var1)] %>% cbind (v1[,2:3])))#
}#
#
load("R_Environments/Jnigra.microbiome.merged.WilliamsOnufrak.RData")
load("R_Environments/Jnigra.microbiome.merged.WilliamsOnufrak.RData")
custom.otu.tax.tbl(soils.merge, 'Genus', 'g__Fusarium')[,1:10]
custom.otu.tax.tbl(shavings.merge, 'Genus', 'g__Fusarium')
custom.otu.tax.tbl(soils.merge, 'Genus', 'g__Fusarium')
custom.otu.tax.tbl(soils.merge, 'Genus', 'g__Neocosmospora')
custom.otu.tax.tbl(shavings.merge, 'Order', 'o__Ophiostomatales')
custom.otu.tax.tbl(soils.merge, 'Family', 'f__Xylariaceae')
setwd("/Users/will1809/OneDrive - purdue.edu/TCD microbiome spring 2017/Aaron manuscript/Geoff_Final_RFiles/Juglans.microbiome.github/Mothur_output")#
#
library(tidyverse)#
library(readxl)#
#
source('baxter.nov2019.R')#
#
metadata <- get_metadata_soilmb()
source('../baxter.nov2019.R')
metadata <- get_metadata_soilmb()
groups  <- read_tsv('Soil.ITS2.jn.Oct2019.opti_mcc.groups.rarefaction')  %>% select(-contains("lci-"), -contains("hci-")) %>% gather(-numsampled, key=sample, value=sobs) %>% mutate(sample=str_replace_all(sample, pattern="0.03-", replacement=""))  %>% drop_na()
groups$sample[!(groups$sample == 'NTC_ITS_S96')] <- groups$sample[!(groups$sample == 'NTC_ITS_S96')] %>% sub('_S_ITS.+', '', ., perl=T)
alpha.soil <- read_tsv(file="Soil.ITS2.jn.Oct2019.opti_mcc.groups.ave-std.summary", col_types=cols(group = col_character())) %>% filter(method=='ave') %>% select(group, sobs, shannon, invsimpson, coverage) %>% gather(-group, key=metric, value=value)
alpha.soil$sample <- alpha.soil$group %>% sub('_S_ITS.+', '', ., perl=T)
metadata_soil <- inner_join(metadata, groups)
missing.sample.groups <- setdiff(groups$sample, metadata$sample)
missing.sample.meta <- setdiff(metadata$sample, groups$sample)
setdiff(groups$sample, alpha.soil$sample)
setdiff(alpha.soil$sample, groups$sample)
setdiff(metadata$sample, alpha.soil$sample)
setdiff(alpha.soil$sample, metadata$sample)
theme(axis.text=element_text(size=20))
quartz(); ggplot(metadata_soil, aes(x=numsampled, y=sobs, group=sample, color=State)) + geom_line() + labs(main="Branches", x="Sequences Sampled", y="Unique OTUs") + theme(axis.text=element_text(size=14), axis.title=element_text(size=18), legend.text=element_text(size=14), legend.title=element_text(size=14))
metadata_soil
groups
metadata
metadata_soil <- inner_join(metadata, groups)
metadata$sample
groups$sample[!(groups$sample == 'NTC_ITS_S96')] <- groups$sample[!(groups$sample == 'NTC_ITS_S96')] %>% sub('_S_ITS.+', '', ., perl=T) %>% sub('0.02-', '', ., perl=T)
groups$sample
missing.sample.groups <- setdiff(groups$sample, metadata$sample)#
missing.sample.meta <- setdiff(metadata$sample, groups$sample)
missing.sample.groups
missing.sample.meta
setdiff(groups$sample, alpha.soil$sample)#
setdiff(alpha.soil$sample, groups$sample)#
#
setdiff(metadata$sample, alpha.soil$sample)#
setdiff(alpha.soil$sample, metadata$sample)
quartz(); ggplot(metadata_soil, aes(x=numsampled, y=sobs, group=sample, color=State)) + geom_line() + labs(main="Branches", x="Sequences Sampled", y="Unique OTUs") + theme(axis.text=element_text(size=14), axis.title=element_text(size=18), legend.text=element_text(size=14), legend.title=element_text(size=14))
quartz(); ggplot(metadata_soil, aes(x=numsampled, y=sobs, group=sample, color=State)) + geom_line() + labs(main="Branches", x="Sequences Sampled", y="Unique OTUs") + theme(axis.text=element_text(size=14), axis.title=element_text(size=18), legend.text=element_text(size=14), legend.title=element_text(size=14))
metadata_soil <- inner_join(metadata, groups)
metadata_soil
quartz(); ggplot(metadata_soil, aes(x=numsampled, y=sobs, group=sample, color=State)) + geom_line() + labs(main="Branches", x="Sequences Sampled", y="Unique OTUs") + theme(axis.text=element_text(size=14), axis.title=element_text(size=18), legend.text=element_text(size=14), legend.title=element_text(size=14))
rarefaction.curve <- function (curves) ggplot(curves, aes(x=numsampled, y=sobs, group=sample, color=State)) + geom_line() + labs(main="Branches", x="Sequences Sampled", y="Unique OTUs") + theme(axis.text=element_text(size=14), axis.title=element_text(size=18), legend.text=element_text(size=14), legend.title=element_text(size=14))
its2.soil <- rarefaction.curve(metadata_soil)
ggarrange(its2.soil, its2.soil, rows=1)
its2.soil
rarefaction.curve <- function (curves) ggplot(curves, aes(x=numsampled, y=sobs, group=sample, color=State)) + geom_line() + labs(main="Branches", x="Sequences Sampled", y="Unique OTUs") + theme(axis.text=element_text(size=14), axis.title=element_text(size=18), legend.text=element_text(size=14), legend.title=element_text(size=14))#
#
metadata.soil.its2 <- get_metadata_soilmb()#
#
groups.soil.its2  <- read_tsv('Soil.ITS2.jn.Oct2019.opti_mcc.groups.rarefaction')  %>% select(-contains("lci-"), -contains("hci-")) %>% gather(-numsampled, key=sample, value=sobs) %>% mutate(sample=str_replace_all(sample, pattern="0.03-", replacement=""))  %>% drop_na()#
#
# 'sample' has to match#
#
groups.soil.its2$sample[!(groups.soil.its2$sample == 'NTC_ITS_S96')] <- groups.soil.its2$sample[!(groups.soil.its2$sample == 'NTC_ITS_S96')] %>% sub('_S_ITS.+', '', ., perl=T) %>% sub('0.02-', '', ., perl=T)#
#
# s[!(s == 'NTC_ITS_S96')] %>% sub('_S_ITS.+', '', ., perl=T)#
#
# note drop_na() resulted in 10 fold reduction in number of rows#
#
# change organization of data frames so each observation is a row#
#
alpha.soil.its2 <- read_tsv(file="Soil.ITS2.jn.Oct2019.opti_mcc.groups.ave-std.summary", col_types=cols(group = col_character())) %>% filter(method=='ave') %>% select(group, sobs, shannon, invsimpson, coverage) %>% gather(-group, key=metric, value=value)#
#
alpha.soil.its2$sample <- alpha.soil.its2$group %>% sub('_S_ITS.+', '', ., perl=T)#
#
its2.soil.curves <- inner_join(metadata.soil.its2, groups.soil.its2)#
#
missing.sample.groups.soil.its2 <- setdiff(groups.soil.its2$sample, metadata.soil.its2$sample)#
missing.sample.meta <- setdiff(metadata.soil.its2$sample, groups.soil.its2$sample)#
missing.sample.groups.soil.its2#
missing.sample.meta#
#
setdiff(groups.soil.its2$sample, alpha.soil.its2$sample)#
setdiff(alpha.soil.its2$sample, groups.soil.its2$sample)#
#
setdiff(metadata.soil.its2$sample, alpha.soil.its2$sample)#
setdiff(alpha.soil.its2$sample, metadata.soil.its2$sample)#
#
# one of the Washington trees is missing WA132_RN_9#
#
its2.soil <- rarefaction.curve(its2.soil.curves)
its2.soil
metadata.branches.its2 <- get_metadata()
groups.branch.its2 <- read_tsv('Phyllo.ITS2.jn.Oct2019.opti_mcc.branch.groups.rarefaction')  %>% select(-contains("lci-"), -contains("hci-")) %>% gather(-numsampled, key=sample, value=sobs) %>% mutate(sample=str_replace_all(sample, pattern="0.03-", replacement=""))  %>% drop_na()
groups.branch.its2$sample <- gsub("-", "_", groups.branch.its2$sample) %>% (function (x) gsub("_L001", "", x)) %>% (function (x) gsub("_001", "", x)) %>% (function (x) gsub("_R1", "", x))
alpha.branch.its2 <- read_tsv(file="Phyllo.ITS2.jn.Oct2019.opti_mcc.branch.groups.ave-std.summary",#
col_types=cols(group = col_character())) %>%#
filter(method=='ave') %>%#
select(group, sobs, shannon, invsimpson, coverage) %>%#
gather(-group, key=metric, value=value)
alpha.branch.its2$sample <- gsub("-", "_", alpha.branch.its2$group) %>% (function (x) gsub("_L001", "", x)) %>% (function (x) gsub("_001", "", x)) %>% (function (x) gsub("_R1", "", x))
its2.branch.curves <- inner_join(metadata.branches.its2, groups.branch.its2)
its2.branch.curves
groups.branch.its2$sample <- gsub("-", "_", groups.branch.its2$sample) %>% (function (x) gsub("_L001", "", x)) %>% (function (x) gsub("_001", "", x)) %>% (function (x) gsub("_R1", "", x))%>% sub('0.02-', '', ., perl=T)
its2.branch.curves <- inner_join(metadata.branches.its2, groups.branch.its2)
its2.branch.curves
metadata.branches.its2
metadata.branches.its2$sample
groups.branch.its2$sample
groups.branch.its2$sample <- gsub("-", "_", groups.branch.its2$sample) %>% (function (x) gsub("_L001", "", x)) %>% (function (x) gsub("_001", "", x)) %>% (function (x) gsub("_R1", "", x))%>% sub('0.02_', '', ., perl=T)
its2.branch.curves <- inner_join(metadata.branches.its2, groups.branch.its2)
its2.branch.curves
setdiff(groups.branch.its2$sample, its2.branch.curves$sample)
setdiff(alpha.branch.its2$sample, its2.branch.curves$sample)
its2.branches <- rarefaction.curve(its2.branch.curves)
its2.branches
groups.soil.16s  <- read_tsv('soil16sotutable_jnigra17_fa19_ajo.groups.rarefaction')  %>% select(-contains("lci-"), -contains("hci-")) %>% gather(-numsampled, key=sample, value=sobs) %>% mutate(sample=str_replace_all(sample, pattern="0.02-", replacement=""))  %>% drop_na()
groups.soil.16s
groups.soil.16s  <- read_tsv('soil16sotutable_jnigra17_fa19_ajo.groups.rarefaction')  %>% select(-contains("lci-"), -contains("hci-")) %>% gather(-numsampled, key=sample, value=sobs) %>% mutate(sample=str_replace_all(sample, pattern="0.03-", replacement=""))  %>% drop_na()
groups.soil.16s
metadata.soil.its2
names(metadata.soil.its2)
metadata.bacteria <- get_metadata_bacteria()
metadata.bacteria
metadata.bacteria$Bact.names
metadata.bacteria$Bact.names2
metadata.bacteria$Bact.names.2
groups.soil.16s
groups.branch.its2 <- read_tsv('Phyllo.ITS2.jn.Oct2019.opti_mcc.branch.groups.rarefaction')  %>% select(-contains("lci-"), -contains("hci-")) %>% gather(-numsampled, key=sample, value=sobs) %>% mutate(sample=str_replace_all(sample, pattern="0.02_", replacement=""))  %>% drop_na()#
#
groups.branch.its2$sample <- gsub("-", "_", groups.branch.its2$sample) %>% (function (x) gsub("_L001", "", x)) %>% (function (x) gsub("_001", "", x)) %>% (function (x) gsub("_R1", "", x))#
#
alpha.branch.its2 <- read_tsv(file="Phyllo.ITS2.jn.Oct2019.opti_mcc.branch.groups.ave-std.summary",#
col_types=cols(group = col_character())) %>%#
filter(method=='ave') %>%#
select(group, sobs, shannon, invsimpson, coverage) %>%#
gather(-group, key=metric, value=value)#
#
alpha.branch.its2$sample <- gsub("-", "_", alpha.branch.its2$group) %>% (function (x) gsub("_L001", "", x)) %>% (function (x) gsub("_001", "", x)) %>% (function (x) gsub("_R1", "", x))#
#
its2.branch.curves <- inner_join(metadata.branches.its2, groups.branch.its2)#
#
setdiff(groups.branch.its2$sample, its2.branch.curves$sample)#
setdiff(alpha.branch.its2$sample, its2.branch.curves$sample)#
#
its2.branches <- rarefaction.curve(its2.branch.curves)
its2.branches
groups.branch.its2 <- read_tsv('Phyllo.ITS2.jn.Oct2019.opti_mcc.branch.groups.rarefaction')  %>% select(-contains("lci-"), -contains("hci-")) %>% gather(-numsampled, key=sample, value=sobs) %>% mutate(sample=str_replace_all(sample, pattern="0.02_", replacement=""))  %>% drop_na()
groups.branch.its2
groups.branch.its2$sample <- gsub("-", "_", groups.branch.its2$sample) %>% (function (x) gsub("_L001", "", x)) %>% (function (x) gsub("_001", "", x)) %>% (function (x) gsub("_R1", "", x))#
#
alpha.branch.its2 <- read_tsv(file="Phyllo.ITS2.jn.Oct2019.opti_mcc.branch.groups.ave-std.summary",#
col_types=cols(group = col_character())) %>%#
filter(method=='ave') %>%#
select(group, sobs, shannon, invsimpson, coverage) %>%#
gather(-group, key=metric, value=value)#
#
alpha.branch.its2$sample <- gsub("-", "_", alpha.branch.its2$group) %>% (function (x) gsub("_L001", "", x)) %>% (function (x) gsub("_001", "", x)) %>% (function (x) gsub("_R1", "", x))#
#
its2.branch.curves <- inner_join(metadata.branches.its2, groups.branch.its2)#
#
setdiff(groups.branch.its2$sample, its2.branch.curves$sample)#
setdiff(alpha.branch.its2$sample, its2.branch.curves$sample)#
#
its2.branches <- rarefaction.curve(its2.branch.curves)
its2.branches
alpha.branch.its2$sample
its2.branch.curves
metadata.branches.its2
metadata.branches.its2$sample
groups.branch.its2$sample
groups.branch.its2 <- read_tsv('Phyllo.ITS2.jn.Oct2019.opti_mcc.branch.groups.rarefaction')  %>% select(-contains("lci-"), -contains("hci-")) %>% gather(-numsampled, key=sample, value=sobs) %>% mutate(sample=str_replace_all(sample, pattern="0.02_", replacement=""))  %>% drop_na()
groups.branch.its2
groups.branch.its2 <- read_tsv('Phyllo.ITS2.jn.Oct2019.opti_mcc.branch.groups.rarefaction')  %>% select(-contains("lci-"), -contains("hci-")) %>% gather(-numsampled, key=sample, value=sobs) %>% mutate(sample=str_replace_all(sample, pattern="0.02-", replacement=""))  %>% drop_na()
groups.branch.its2$sample <- gsub("-", "_", groups.branch.its2$sample) %>% (function (x) gsub("_L001", "", x)) %>% (function (x) gsub("_001", "", x)) %>% (function (x) gsub("_R1", "", x))
alpha.branch.its2 <- read_tsv(file="Phyllo.ITS2.jn.Oct2019.opti_mcc.branch.groups.ave-std.summary",#
col_types=cols(group = col_character())) %>%#
filter(method=='ave') %>%#
select(group, sobs, shannon, invsimpson, coverage) %>%#
gather(-group, key=metric, value=value)#
#
alpha.branch.its2$sample <- gsub("-", "_", alpha.branch.its2$group) %>% (function (x) gsub("_L001", "", x)) %>% (function (x) gsub("_001", "", x)) %>% (function (x) gsub("_R1", "", x))#
#
its2.branch.curves <- inner_join(metadata.branches.its2, groups.branch.its2)
its2.branch.curves
setdiff(groups.branch.its2$sample, its2.branch.curves$sample)#
setdiff(alpha.branch.its2$sample, its2.branch.curves$sample)#
#
its2.branches <- rarefaction.curve(its2.branch.curves)
its2.branches
groups.soil.its2  <- read_tsv('Soil.ITS2.jn.Oct2019.opti_mcc.groups.rarefaction')  %>% select(-contains("lci-"), -contains("hci-")) %>% gather(-numsampled, key=sample, value=sobs) %>% mutate(sample=str_replace_all(sample, pattern="0.02-", replacement=""))  %>% drop_na()#
#
# 'sample' has to match#
#
groups.soil.its2$sample[!(groups.soil.its2$sample == 'NTC_ITS_S96')] <- groups.soil.its2$sample[!(groups.soil.its2$sample == 'NTC_ITS_S96')] %>% sub('_S_ITS.+', '', ., perl=T)#
#
# s[!(s == 'NTC_ITS_S96')] %>% sub('_S_ITS.+', '', ., perl=T)#
#
# note drop_na() resulted in 10 fold reduction in number of rows#
#
# change organization of data frames so each observation is a row#
#
alpha.soil.its2 <- read_tsv(file="Soil.ITS2.jn.Oct2019.opti_mcc.groups.ave-std.summary", col_types=cols(group = col_character())) %>% filter(method=='ave') %>% select(group, sobs, shannon, invsimpson, coverage) %>% gather(-group, key=metric, value=value)#
#
alpha.soil.its2$sample <- alpha.soil.its2$group %>% sub('_S_ITS.+', '', ., perl=T)#
#
its2.soil.curves <- inner_join(metadata.soil.its2, groups.soil.its2)#
#
missing.sample.groups.soil.its2 <- setdiff(groups.soil.its2$sample, metadata.soil.its2$sample)#
missing.sample.meta <- setdiff(metadata.soil.its2$sample, groups.soil.its2$sample)#
missing.sample.groups.soil.its2#
missing.sample.meta#
#
setdiff(groups.soil.its2$sample, alpha.soil.its2$sample)#
setdiff(alpha.soil.its2$sample, groups.soil.its2$sample)#
#
setdiff(metadata.soil.its2$sample, alpha.soil.its2$sample)#
setdiff(alpha.soil.its2$sample, metadata.soil.its2$sample)#
#
# one of the Washington trees is missing WA132_RN_9#
#
its2.soil <- rarefaction.curve(its2.soil.curves)
its2.soil
groups.branch.its2$sample
groups.branch.16s$sample
groups.soil.16s$sample
alpha.soil.16s <- read_tsv(file="soil16sotutable_jnigra17_fa19_ajo.groups.ave-std.summary", col_types=cols(group = col_character())) %>% filter(method=='ave') %>% select(group, sobs, shannon, invsimpson, coverage) %>% gather(-group, key=metric, value=value)
