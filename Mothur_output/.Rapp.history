stati$id
stati$data$id
?ncdc
get_GSOD()
library(GSODR)
install.packages('GSODR')
install.packages('gsod')
install.packages("gsod", repos="http://R-Forge.R-project.org")
library(gsod)
help(gsod)
data(stations)
stations
library(ggplot)
library(ggplot2)
library(tidyr)#
library(vegan)#
#
#First I import the whole OTU table I recieved from Mothur. Note at this point taxonomy is not included, it is just raw OTU counts (columns) by sample or group (rows). Below I indicate that the row.names are in column 2 of the imported file. #
bigfile.sample<-read.table("/Users/will1809/OneDrive - purdue.edu/TCD microbiome spring 2017/Results.sep.2019/Caulo.ITS/Spr2017OTU.Jan2018.opti_mcc.branch.shared",header=TRUE,sep="\t",fill=TRUE,strip.white=TRUE, row.names=2)#
#
rownames(bigfile.sample) <- rownames(bigfile.sample) %>% sub('s_S.+', '', ., perl=T)#
#Next I import the metadata for the particular habitat of interest. In this case I am working with drill shavings. I will use this metadata to subset the larger OTU file above. #
source('/Users/will1809/OneDrive - purdue.edu/TCD microbiome spring 2017/Results.sep.2019/Caulo.ITS/baxter.sept2019.R')#
ds.met<- get_metadata()#
#Next I import the taxonomy file. This contains the taxonomy assignments for all OTUs in the study and not just the ones for the particuluar habitat of interest. This will get subset as well. #
taxonomy<-read.table("/Users/will1809/OneDrive - purdue.edu/TCD microbiome spring 2017/Results.sep.2019/Caulo.ITS/jnits.trim.contigs.good.unique.precluster.pick.pick.opti_mcc.0.02.cons.taxonomy",header=TRUE,sep="\t",fill=TRUE,strip.white=TRUE,row.names=1)#
ds.names<-ds.met$Group[ds.met$Type=='BranchBark'] %>% sub('s$', '', ., perl=T)#
#
# added this to deal with sample name issue#
# its confusing but it works#
ds.met2 <- ds.met[ds.met$Type=='BranchBark',]#
#
cbind(ds.met2$Group, ds.names)#
#
ds.met2$sample.name.2 <- ds.names#
#
ds.met2[,c('sample.name.2','Group')]#
#Here I use the subset function to pull out just the samples belonging to drill shavings. #
ds<-subset(bigfile.sample, rownames(bigfile.sample) %in% ds.names)#
dim(ds)#
dspure<- ds[,colSums(ds)>0]#
#Here I am further subsetting the data. I am removing some MOTHUR metadata that is useless.  #
dim(dspure)#
#
dspure[1:4,1:4]#
dspure[1:4,7829:7831]#
dspureotu<-dspure[,3:7831]#
#
dim(dspureotu)#
#Below I am reformatting the OTU table so that I can begin to filter and merge the taxonomy information. #
transdspure<-as.data.frame(t(dspureotu))#
#The below function is asking specifically for the OTU IDs. These are the row names. I will use these to subset the taxonomy file. #
transdspurelabs<-labels(transdspure)#
taxds<-subset(taxonomy, rownames(taxonomy) %in% transdspurelabs[[1]])#
taxdspure<-(taxds[,2])#
#Below I am using the separate function from tidyr to split the taxonomy strings into columns by semi-colon so that I can rename the OTUs to give them more meaning for downstream analyses.#
taxonomylabs<-c("kingdom","phylum","class","order","family","genus","species")#
otutabtaxds<-data.frame(taxonomy=taxdspure,transdspure)#
otutabtaxdssep<-separate(otutabtaxds,into=taxonomylabs,col=taxonomy,sep=";")#
head(otutabtaxdssep)#
#Here I am renaming the OTUs using the make.names function. This will make the OTU name something more informative. I am using genus to do this. #
rownames(otutabtaxdssep)<-make.names(otutabtaxdssep$genus,unique=TRUE)#
rownames(otutabtaxdssep)#
head(otutabtaxdssep)#
#
dim(otutabtaxdssep)#
otutabtaxds<-otutabtaxdssep[,8:54] ### missing a sample#
renamotutabtaxds<-as.data.frame(t(otutabtaxds))#
#Rarefaction#
sort(rowSums(renamotutabtaxds[,1:7829]))#
#Here we are rarefying the data using the rrarefy function from vegan. I use the sort function above to determine the lowest number of sequences in a sample. #
## stopped here 7:33 pm July 25. 2019#
#
rareotuds<-as.data.frame(rrarefy(renamotutabtaxds, sample=3500))#
rareotuds<-as.data.frame(subset(rareotuds,rowSums(rareotuds)>3499))#
samples<-row.names(rareotuds)#
# Lost 1 sample#
#Relabundance calculation#
#relabundds <- rareotuds / 38000#
#
dim(rareotuds)#
rareotutabtaxds<-as.data.frame(rareotuds, total=rowSums(rareotuds[,1:7829]))#
rareotutabtaxds#
#
relabundds<-decostand(rareotutabtaxds, method="total")
pairs(relabundds)
pairs(relabundds[1:10,1:10])
relabundds[1:10,1:10]
pairs(relabundds[,1:10])
pairs(relabundds[,1:10], col=as.numeric(row.names(relabundds)))
row.names(relabundds)
as.numeric(row.names(relabundds))
pairs(relabundds[,1:10], col=as.numeric(as.vector(row.names(relabundds)))
pairs(relabundds[,1:10], col=as.numeric(as.vector(row.names(relabundds))))
pairs(relabundds[,1:10], col=as.numeric(row.names(relabundds[,1:10])))
pairs(relabundds[,1:10], col=as.numeric(row.names(relabundds)[,1:10]))
pairs(relabundds[,1:10], col=as.numeric(row.names(relabundds)))
iris<-cbind(row.names(relabundds),relabundds[,1:10])
iris
pairs(iris[,2:11], col=as.numeric(iris[,1]))
iris.dist<-vegdist(relabundds, method="euclid")
ds
ds.met
adonis(iris.dist ~ ds.met)
dim(iris.dist)
iris.dist<-vegdist(relabundds, method="euclid")
dim(iris.dist)
iris.dist
dims(iris.dist)
dim(iris.dist)
str(iris.dist)
ds.met
adonis(iris.dist ~ ds.met$Clone)
adonis(t(iris.dist) ~ ds.met$Clone)
hclust(iris.dist)
hplot(clust(iris.dist))
plot(hclust(iris.dist))
adonis(relabundds ~ ds.met$Clone)
dim(relabundds)
dim(ds.met)
ds.met2
dim(ds.met2)
ds.met2[,c('sample.name.2','Group')]
rownames(bigfile.sample) %in% ds.names
adonis(relabundds ~ ds.met2$Clone)
adonis(relabundds ~ ds.met2$Clone[-1])
ds.met2$sample.name2
ds.met2$sample.name.2
setideff(ds.met2$sample.name.2, row.names(relabundds))
setdiff(ds.met2$sample.name.2, row.names(relabundds))
relabundds <- relabunnds[-which(row.names(relabundds) == setdiff(ds.met2$sample.name.2, row.names(relabundds))),]
relabundds <- relabundds[-which(row.names(relabundds) == setdiff(ds.met2$sample.name.2, row.names(relabundds))),]
adonis(relabundds ~ ds.met2$Clone[-1])
adonis(relabundds ~ ds.met2$Clone)
dim(relabundds)
dim(ds.met2)
which(row.names(relabundds) == setdiff(ds.met2$sample.name.2, row.names(relabundds)))
relabundds<-decostand(rareotutabtaxds, method="total")
setdiff(ds.met2$sample.name.2, row.names(relabundds))
which(row.names(relabundds) == setdiff(ds.met2$sample.name.2, row.names(relabundds)))
row.names(relabundds)
ds.met2$sample.name.2
row.names(relabundds) == setdiff(ds.met2$sample.name.2, row.names(relabundds)))
which(row.names(relabundds) == setdiff(ds.met2$sample.name.2, row.names(relabundds)))
row.names(relabundds) == setdiff(ds.met2$sample.name.2, row.names(relabundds))
row.names(relabundds) %in% setdiff(ds.met2$sample.name.2, row.names(relabundds))
setdiff(ds.met2$sample.name.2, row.names(relabundds))
missing<-setdiff(ds.met2$sample.name.2, row.names(relabundds))
which(row.names(relabundds) == missing)
row.names(relabundds)
ds.met3 <- ds.met2[-which(ds.met2$sample.name.2 == missing),]
adonis(relabundds ~ ds.met3$Clone)
adonis(relabundds ~ ds.met3$Group)
ds.met3$Group
adonis(relabundds ~ ds.met3$State)
plot(hclust(relabundds))
hclust(relabundds)
relabundds
iris.nmds <- metaMDS(relabundds)
mds.pts <- iris.nmds$points
iris.xy <- scores(mds.pts, display="sites")
plot(mds.pts)
points(iris.xy, col=as.numeric(ds.met3))
points(iris.xy, col=as.numeric(ds.met3$State))
iris.xy
points(iris.xy, col=as.numeric(ds.met3$State))
ds.met3$State
plot(mds.pts, col=as.numeric(ds.met3$State))
as.numeric(ds.met3$State)
ds.met3$State
as.numeric(ds.met3$State)
plot(mds.pts, col=as.numeric(as.factor(ds.met3$State)))
update
install.packages('knitr')
install.packages('rmarkdown')
readline()
words <- readline()
words
subject <- readline()
verb <- readline()
object <- readling()
object <- readline()
paste(subject, verb, object)
-3.3 + 0.164*30
library(asbio)#
library(car)#
library(MuMIn)#
library(effects)#
library(ROCR)
data(crabs)  # Load the crabs data frame from asbio#
#
head(crabs)  # Look at a few lines   Let's look at the response values:   xtabs() creates a contingency table from designated factors#
tab <- xtabs(~ satell, data=crabs)  #
tab   # Frequency for satellite counts;#
#
x <- as.numeric(names(tab))  # convert the distinct levels of satell to #
x                            # numeric#
#
freq <- as.numeric(tab)      # frequency for each value of satell   The "h" argument below gives histogram-like vertical bars#
plot(x=x, y=freq, type="h", xlab="Number of Satellites", ylab="Frequency")#
#
points(x, tab, pch=16)  # puts a black circle on top of bars
data(crabs)#
crab.glm <- glm(satell ~ width, family = poisson(link="log"), data=crabs)
exp(-3.3 + .164*31) / exp(-3.3 + .164*30)
exp(coef(crab.glm))
.037+1.178(30)=
.037+1.178(30)
.037+1.178*30
exp(as.numeric(coef(crab.glm)[1] + coef(crab.glm)[2]*30))
exp(as.numeric(coef(crab.glm)[1] + coef(crab.glm)[2]*31))
library(tidyverse)#
library(RColorBrewer)#
library(vegan)#
library(rcompanion)#
library(car)#
library(agricolae)#
library(extrafont)
analyze.necrosis <- function(treat, necr, trans = function (x) x, remove.0s=FALSE) {#
	if (remove.0s) {#
		treat <- treat[necr > 0]#
		necr <- necr[necr > 0]#
	}#
	n <- trans(necr)#
	model <- lm(n ~ treat)#
	anv <- aov(n ~ treat)#
	t3 <- Anova(model, type=3)#
	tuk <- TukeyHSD(anv, ordered=TRUE)#
	hsd <- HSD.test(anv, "treat")#
	list(Regression=model, ANOVA=t3, Tukey=hsd, HSD.p=tuk)#
}#
#
analyze.necrosis.bc.outliers <- function(treat, necr) {#
#
	# start out by fitting model of gm-inoculated#
	model <- lm(necr ~ treat)#
#
	# refit with box cox transformation#
	lambda<- with(boxCox(model, plotit=FALSE), x[which.max(y)])#
	model2<- lm(necr^lambda ~ treat)#
	summary(model2); Anova(model2)#
#
	# identify outliers#
	outliers <- cooks.distance(model2) > 4 / length(necr)#
#
	# refit model and refit with boxcox transformation#
	# and perform Tukey test with analyze.necrosis#
	c(analyze.necrosis(treat[-outliers], necr[-outliers], function(x) x^lambda), list(outliers=which(as.vector(outliers))))#
}
analyze.necrosis.bc.outliers(treat=c("A","A","B","B"), necr=c(1,2,3,4))
analyze.necrosis2 <- function(treat, necr) {#
#
	# start out by fitting model of gm-inoculated#
	model <- lm(necr ~ treat)#
#
	# refit with box cox transformation#
	lambda<- with(boxCox(model, plotit=FALSE), x[which.max(y)])#
	model2<- lm(necr^lambda ~ treat)#
	summary(model2); Anova(model2)#
#
	# identify outliers#
	outliers <- cooks.distance(model2) > 4 / length(necr)#
#
	# refit model and refit with boxcox transformation#
	# and perform Tukey test with analyze.necrosis#
	c(analyze.necrosis(treat[-outliers], necr[-outliers], function(x) x^lambda), list(outliers=which(as.vector(outliers))))#
}
analyze.necrosis2(treat=c("A","A","B","B"), necr=c(1,2,3,4))
analyze.necrosis.bc.outliers <- function(treat, necr) {#
necr#
	# start out by fitting model of gm-inoculated#
#	model <- lm(necr ~ treat)#
#
	# refit with box cox transformation#
#	lambda<- with(boxCox(model, plotit=FALSE), x[which.max(y)])#
#	model2<- lm(necr^lambda ~ treat)#
#	summary(model2); Anova(model2)#
#
	# identify outliers#
#	outliers <- cooks.distance(model2) > 4 / length(necr)#
#
	# refit model and refit with boxcox transformation#
	# and perform Tukey test with analyze.necrosis#
#	c(analyze.necrosis(treat[-outliers], necr[-outliers], function(x) x^lambda), list(outliers=which(as.vector(outliers))))#
}
analyze.necrosis2(treat=c("A","A","B","B"), necr=c(1,2,3,4))
analyze.necrosis.bc.outliers <- function(treat, necr) {#
#
	# start out by fitting model of gm-inoculated#
	model <- lm(necr ~ treat)#
#
	# refit with box cox transformation#
	lambda<- with(boxCox(model, plotit=FALSE), x[which.max(y)])#
	model2<- lm(necr^lambda ~ treat)#
	summary(model2); Anova(model2)#
#
	# identify outliers#
	outliers <- cooks.distance(model2) > 4 / length(necr)#
#
	# refit model and refit with boxcox transformation#
	# and perform Tukey test with analyze.necrosis#
	lm(necr[-outliers] ~ treat[-outliers])#
	#c(analyze.necrosis(treat[-outliers], necr[-outliers], function(x) x^lambda), list(outliers=which(as.vector(outliers))))#
}
analyze.necrosis2(treat=c("A","A","B","B"), necr=c(1,2,3,4))
analyze.necrosis.bc.outliers(treat=c("A","A","B","B"), necr=c(1,2,3,4))
analyze.necrosis.bc.outliers
setwd("/Users/will1809/OneDrive - purdue.edu/TCD microbiome spring 2017/Aaron manuscript/Geoff_Final_RFiles/Juglans.microbiome.github/Mothur_output")#
#
library(tidyverse)#
library(readxl)#
#
source('../baxter.nov2019.R')#
#
rarefaction.curve <- function (curves) ggplot(curves, aes(x=numsampled, y=sobs, group=sample, color=State)) + geom_line() + labs(main="Branches", x="Sequences Sampled", y="Unique OTUs") + theme(axis.text=element_text(size=14), axis.title=element_text(size=18), legend.text=element_text(size=14), legend.title=element_text(size=14))#
#
##### ITS2 SOIL#
#
metadata.soil.its2 <- get_metadata_soilmb()#
#
groups.soil.its2  <- read_tsv('Soil.ITS2.jn.Oct2019.opti_mcc.groups.rarefaction')  %>% select(-contains("lci-"), -contains("hci-")) %>% gather(-numsampled, key=sample, value=sobs) %>% mutate(sample=str_replace_all(sample, pattern="0.02-", replacement=""))  %>% drop_na()#
#
# 'sample' has to match#
#
groups.soil.its2$sample[!(groups.soil.its2$sample == 'NTC_ITS_S96')] <- groups.soil.its2$sample[!(groups.soil.its2$sample == 'NTC_ITS_S96')] %>% sub('_S_ITS.+', '', ., perl=T)#
#
# s[!(s == 'NTC_ITS_S96')] %>% sub('_S_ITS.+', '', ., perl=T)#
#
# note drop_na() resulted in 10 fold reduction in number of rows#
#
# change organization of data frames so each observation is a row#
#
#alpha.soil.its2 <- read_tsv(file="Soil.ITS2.jn.Oct2019.opti_mcc.groups.ave-std.summary", col_types=cols(group = col_character())) %>% filter(method=='ave') %>% select(group, sobs, shannon, invsimpson, coverage) %>% gather(-group, key=metric, value=value)#
#
#alpha.soil.its2$sample <- alpha.soil.its2$group %>% sub('_S_ITS.+', '', ., perl=T)#
#
its2.soil.curves <- inner_join(metadata.soil.its2, groups.soil.its2)#
#
missing.sample.groups.soil.its2 <- setdiff(groups.soil.its2$sample, metadata.soil.its2$sample)#
missing.sample.meta <- setdiff(metadata.soil.its2$sample, groups.soil.its2$sample)#
missing.sample.groups.soil.its2#
missing.sample.meta#
#
#setdiff(groups.soil.its2$sample, alpha.soil.its2$sample)#
#setdiff(alpha.soil.its2$sample, groups.soil.its2$sample)#
#
#setdiff(metadata.soil.its2$sample, alpha.soil.its2$sample)#
#setdiff(alpha.soil.its2$sample, metadata.soil.its2$sample)#
#
# one of the Washington trees is missing WA132_RN_9#
#
its2.soil <- rarefaction.curve(its2.soil.curves)
its2.soil
metadata.bacteria <- get_metadata_bacteria()
metadata.bacteria$Bact.names.2
groups.soil.16s  <- read_tsv('soil16sotutable_jnigra17_fa19_ajo.groups.rarefaction')  %>% select(-contains("lci-"), -contains("hci-")) %>% gather(-numsampled, key=sample, value=sobs) %>% mutate(sample=str_replace_all(sample, pattern="0.03-", replacement=""))  %>% drop_na()#
groups.soil.16s$sample
metadata.bacteria$Bact.names.2
metadata.bacteria$sample <- metadata.bacteria$Bact.names.2
B16s.soil.curves <- inner_join(metadata.bacteria, groups.soil.16s )
B16s.soil.curves
B16s.branches <- rarefaction.curve(B16s.soil.curves)
B16s.branches
rarefaction.curve <- function (curves, legpos='none') ggplot(curves, aes(x=numsampled, y=sobs, group=sample, color=State)) + geom_line() + theme(axis.text=element_text(size=14), axis.title=element_text(size=18), legend.position=legpos)#
#
rare.xlab <- function (main) labs(main=main, x="Sequences Sampled", y="")#
rare.ylab <- function (main) labs(main=main, x="", y="Unique OTUs")#
rare.corn <- function (main) labs(main=main, x="", y="")#
rare.main <- function (main) labs(main=main, x="Sequences Sampled", y="Unique OTUs")#
#
rare.lgnd <- function () theme(legend.text=element_text(size=14), legend.title=element_text(size=14))
groups.branches.16s  <- read_tsv('bark16sotutable_jnigra17_fa19_ajo.shared')  %>% select(-contains("lci-"), -contains("hci-")) %>% gather(-numsampled, key=sample, value=sobs) %>% mutate(sample=str_replace_all(sample, pattern="0.03-", replacement=""))  %>% drop_na()#
#
B16s.branches.curves <- inner_join(metadata.bacteria, groups.branches.16s )#
B16s.branches <- rarefaction.curve(B16s.branches.curves)
groups.branches.16s  <- read_tsv('bark16sotutable_jnigra17_fa19_ajo.shared')  %>% select(-contains("lci-"), -contains("hci-"))
groups.branches.16s  <- read_tsv('bark16sotutable_jnigra17_fa19_ajo.shared')  %>% select(-contains("lci-"), -contains("hci-")) %>% gather(-numsampled, key=sample, value=sobs)
groups.branches.16s  <- read_tsv('bark16sotutable_jnigra17_fa19_ajo.shared')  %>% select(-contains("lci-"), -contains("hci-"))
groups.branches.16s
read_tsv('soil16sotutable_jnigra17_fa19_ajo.groups.rarefaction')  %>% select(-contains("lci-"), -contains("hci-"))
groups.branches.16s  <- read_tsv('bark16sotutable_jnigra17_fa19_ajo.groups.rarefaction')  %>% select(-contains("lci-"), -contains("hci-")) %>% gather(-numsampled, key=sample, value=sobs) %>% mutate(sample=str_replace_all(sample, pattern="0.03-", replacement=""))  %>% drop_na()
B16s.branches.curves <- inner_join(metadata.bacteria, groups.branches.16s )#
B16s.branches <- rarefaction.curve(B16s.branches.curves)
B16s.branches
B16s.branches.curves
groups.branches.16s
metadata.bacteria$sample
metadata.bacteria$sample <- metadata.bacteria$Bact.names
B16s.branches.curves <- inner_join(metadata.bacteria, groups.branches.16s )
B16s.branches <- rarefaction.curve(B16s.branches.curves)
B16s.branches
B16s.branches+ rare.corn()
B16s.branches+ rare.corn()
rare.xlab <- function (main="") labs(main=main, x="Sequences Sampled", y="")#
rare.ylab <- function (main="") labs(main=main, x="", y="Unique OTUs")#
rare.corn <- function (main="") labs(main=main, x="", y="")#
rare.main <- function (main="") labs(main=main, x="Sequences Sampled", y="Unique OTUs")
B16s.branches+ rare.corn()
rare.xlab <- function (main="") labs(main=main, x="Sequences Sampled", y="")#
rare.ylab <- function (main="") labs(main=main, x="", y="Unique OTUs")#
rare.main <- function (main="") labs(main=main, x="", y="")#
rare.corn <- function (main="") labs(main=main, x="Sequences Sampled", y="Unique OTUs")
B16s.branches+ rare.corn()
rare.xlab <- function (main="") labs(main=main, x="\nSequences Sampled", y="")#
rare.ylab <- function (main="") labs(main=main, x="", y="OTU Richness\n")#
rare.main <- function (main="") labs(main=main, x="", y="")#
rare.corn <- function (main="") labs(main=main, x="\nSequences Sampled", y="OTU Richness\n")
B16s.soil <- rarefaction.curve(B16s.soil.curves)
grid.arrange(its2.branches, its2.soil, B16s.branches, B16s.soil, nrow=2, ncol=2)
library(ggpubr)
grid.arrange(its2.branches, its2.soil, B16s.branches, B16s.soil, nrow=2, ncol=2)
library(gridExtra)
grid.arrange(its2.branches, its2.soil, B16s.branches, B16s.soil, nrow=2, ncol=2)
setwd("/Users/will1809/OneDrive - purdue.edu/TCD microbiome spring 2017/Aaron manuscript/Geoff_Final_RFiles/Juglans.microbiome.github/Mothur_output")#
#
library(tidyverse)#
library(readxl)#
library(gridExtra)#
#
source('../baxter.nov2019.R')#
#
rarefaction.curve <- function (curves, legpos='none') ggplot(curves, aes(x=numsampled, y=sobs, group=sample, color=State)) + geom_line() + theme(axis.text=element_text(size=14), axis.title=element_text(size=18), legend.position=legpos)#
#
rare.xlab <- function (main="") labs(main=main, x="\nSequences Sampled", y="")#
rare.ylab <- function (main="") labs(main=main, x="", y="OTU Richness\n")#
rare.main <- function (main="") labs(main=main, x="", y="")#
rare.corn <- function (main="") labs(main=main, x="\nSequences Sampled", y="OTU Richness\n")#
#
rare.lgnd <- function () theme(legend.text=element_text(size=14), legend.title=element_text(size=14))#
#
##### ITS2 SOIL#
#
metadata.soil.its2 <- get_metadata_soilmb()#
#
groups.soil.its2  <- read_tsv('Soil.ITS2.jn.Oct2019.opti_mcc.groups.rarefaction')  %>% select(-contains("lci-"), -contains("hci-")) %>% gather(-numsampled, key=sample, value=sobs) %>% mutate(sample=str_replace_all(sample, pattern="0.02-", replacement=""))  %>% drop_na()#
#
# 'sample' has to match#
#
groups.soil.its2$sample[!(groups.soil.its2$sample == 'NTC_ITS_S96')] <- groups.soil.its2$sample[!(groups.soil.its2$sample == 'NTC_ITS_S96')] %>% sub('_S_ITS.+', '', ., perl=T)#
#
# s[!(s == 'NTC_ITS_S96')] %>% sub('_S_ITS.+', '', ., perl=T)#
#
# note drop_na() resulted in 10 fold reduction in number of rows#
#
# change organization of data frames so each observation is a row#
#
its2.soil.curves <- inner_join(metadata.soil.its2, groups.soil.its2)#
#
missing.sample.groups.soil.its2 <- setdiff(groups.soil.its2$sample, metadata.soil.its2$sample)#
missing.sample.meta <- setdiff(metadata.soil.its2$sample, groups.soil.its2$sample)#
missing.sample.groups.soil.its2#
missing.sample.meta#
#
# one of the Washington trees is missing WA132_RN_9#
#
its2.soil <- rarefaction.curve(its2.soil.curves)#
#
#### ITS2 BRANCHES#
#
metadata.branches.its2 <- get_metadata()#
#
groups.branch.its2 <- read_tsv('Phyllo.ITS2.jn.Oct2019.opti_mcc.branch.groups.rarefaction')  %>% select(-contains("lci-"), -contains("hci-")) %>% gather(-numsampled, key=sample, value=sobs) %>% mutate(sample=str_replace_all(sample, pattern="0.02-", replacement=""))  %>% drop_na()#
#
groups.branch.its2$sample <- gsub("-", "_", groups.branch.its2$sample) %>% (function (x) gsub("_L001", "", x)) %>% (function (x) gsub("_001", "", x)) %>% (function (x) gsub("_R1", "", x))#
#
its2.branch.curves <- inner_join(metadata.branches.its2, groups.branch.its2)#
#
setdiff(groups.branch.its2$sample, its2.branch.curves$sample)#
setdiff(alpha.branch.its2$sample, its2.branch.curves$sample)#
#
its2.branches <- rarefaction.curve(its2.branch.curves)#
#
##### 16S#
#
metadata.bacteria <- get_metadata_bacteria()#
#
##### 16S SOIL#
#
groups.soil.16s  <- read_tsv('soil16sotutable_jnigra17_fa19_ajo.groups.rarefaction')  %>% select(-contains("lci-"), -contains("hci-")) %>% gather(-numsampled, key=sample, value=sobs) %>% mutate(sample=str_replace_all(sample, pattern="0.03-", replacement=""))  %>% drop_na()#
#
metadata.bacteria$sample <- metadata.bacteria$Bact.names.2#
#
B16s.soil.curves <- inner_join(metadata.bacteria, groups.soil.16s )#
B16s.soil <- rarefaction.curve(B16s.soil.curves)#
#
##### 16S BRANCHES#
#
groups.branches.16s  <- read_tsv('bark16sotutable_jnigra17_fa19_ajo.groups.rarefaction')  %>% select(-contains("lci-"), -contains("hci-")) %>% gather(-numsampled, key=sample, value=sobs) %>% mutate(sample=str_replace_all(sample, pattern="0.03-", replacement=""))  %>% drop_na()#
#
metadata.bacteria$sample <- metadata.bacteria$Bact.names#
#
B16s.branches.curves <- inner_join(metadata.bacteria, groups.branches.16s )#
B16s.branches <- rarefaction.curve(B16s.branches.curves)#
#
B16s.branches+ rare.corn()#
#
grid.arrange(its2.branches, its2.soil, B16s.branches, B16s.soil, nrow=2, ncol=2)
its2.soil <- rarefaction.curve(its2.soil.curves)#
its2.branches <- rarefaction.curve(its2.branch.curves)#
B16s.soil <- rarefaction.curve(B16s.soil.curves)#
B16s.branches <- rarefaction.curve(B16s.branches.curves)
its2.soil
B16s.branches
grid.arrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil"), nrow=2, ncol=2)
?labs
rare.xlab <- function (main="") labs(title=main, x="\nSequences Sampled", y="")#
rare.ylab <- function (main="") labs(title=main, x="", y="OTU Richness\n")#
rare.main <- function (main="") labs(title=main, x="", y="")#
rare.corn <- function (main="") labs(title=main, x="\nSequences Sampled", y="OTU Richness\n")
grid.arrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil"), nrow=2, ncol=2)
legend.position = legpos,
rarefaction.curve <- function (curves, legpos='none')#
	ggplot(curves, aes(x=numsampled, y=sobs, group=sample, color=State)) +#
		geom_line() + #
		theme_bw() +#
		theme(#
			panel.border = element_blank(),#
			panel.background = element_rect(fill = "transparent"), # bg of the panel#
    		plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot#
      	  	legend.position = legpos,#
			panel.grid = element_blank(),#
			panel.grid.major = element_blank(),#
			panel.grid.minor = element_blank(),#
			axis.line = element_line(colour = "black"),#
			axis.title = element_text(size = 16),#
			axis.text = element_text(size = 14))
rarefaction.curve
its2.soil <- rarefaction.curve(its2.soil.curves)#
its2.branches <- rarefaction.curve(its2.branch.curves)#
B16s.soil <- rarefaction.curve(B16s.soil.curves)#
B16s.branches <- rarefaction.curve(B16s.branches.curves, legpos="none")#
#
grid.arrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil"), nrow=2, ncol=2)
rarefaction.curve <- function (curves, legpos='none')
ggplot(curves, aes(x=numsampled/1000, y=sobs, group=sample, color=State)) +
geom_line() + #
		theme_bw() +#
		theme(#
			panel.border = element_blank(),#
			panel.background = element_rect(fill = "transparent"), # bg of the panel#
    		plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot#
      	  	legend.position = legpos,#
			panel.grid = element_blank(),#
			panel.grid.major = element_blank(),#
			panel.grid.minor = element_blank(),#
			axis.line = element_line(colour = "black"),#
			axis.title = element_text(size = 16),#
			axis.text = element_text(size = 14))
rarefaction.curve <- function (curves, legpos='none') ggplot(curves, aes(x=numsampled/1000, y=sobs, group=sample, color=State)) +
ggplot(curves, aes(x=numsampled/1000, y=sobs, group=sample, color=State)) +
geom_line() +
theme_bw() +
theme(
panel.border = element_blank(),#
			panel.background = element_rect(fill = "transparent"), # bg of the panel#
    		plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot#
      	  	legend.position = legpos,#
			panel.grid = element_blank(),#
			panel.grid.major = element_blank(),#
			panel.grid.minor = element_blank(),#
			axis.line = element_line(colour = "black"),#
			axis.title = element_text(size = 16),#
			axis.text = element_text(size = 14))
its2.soil <- rarefaction.curve(its2.soil.curves)#
its2.branches <- rarefaction.curve(its2.branch.curves)#
B16s.soil <- rarefaction.curve(B16s.soil.curves)#
B16s.branches <- rarefaction.curve(B16s.branches.curves, legpos="none")#
#
grid.arrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil"), nrow=2, ncol=2)
rarefaction.curve <- function (curves, legpos='none') {#
	curves$k <- with(curves, numsampled/1000)#
	ggplot(curves, aes(x=k, y=sobs, group=sample, color=State)) +#
		geom_line() + #
		theme_bw() +#
		theme(#
			panel.border = element_blank(),#
			panel.background = element_rect(fill = "transparent"), # bg of the panel#
    		plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot#
      	  	legend.position = legpos,#
			panel.grid = element_blank(),#
			panel.grid.major = element_blank(),#
			panel.grid.minor = element_blank(),#
			axis.line = element_line(colour = "black"),#
			axis.title = element_text(size = 16),#
			axis.text = element_text(size = 14))#
}
its2.soil <- rarefaction.curve(its2.soil.curves)#
its2.branches <- rarefaction.curve(its2.branch.curves)#
B16s.soil <- rarefaction.curve(B16s.soil.curves)#
B16s.branches <- rarefaction.curve(B16s.branches.curves, legpos="none")#
#
grid.arrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil"), nrow=2, ncol=2)
rare.xlab <- function (main="") labs(title=main, x="\nK Sequences Sampled", y="")#
rare.ylab <- function (main="") labs(title=main, x="", y="OTU Richness\n")#
rare.main <- function (main="") labs(title=main, x="", y="")#
rare.corn <- function (main="") labs(title=main, x="\nK Sequences Sampled", y="OTU Richness\n")
grid.arrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil"), nrow=2, ncol=2)
g<-grid.arrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil"), nrow=2, ncol=2)
data.frame(B16s.branches.curves, Compart="Soil", Barcode="ITS2"))
rbind(data.frame(its2.soil.curves, Compart="Soil", Barcode="ITS2"),#
	data.frame(its2.branch.curves, Compart="Soil", Barcode="ITS2")#
	data.frame(B16s.soil.curves, Compart="Soil", Barcode="ITS2")#
	data.frame(B16s.branches.curves, Compart="Soil", Barcode="ITS2"))
rbind(data.frame(its2.soil.curves, Compart="Soil", Barcode="ITS2"),#
	data.frame(its2.branch.curves, Compart="Soil", Barcode="ITS2")#
	data.frame(B16s.soil.curves, Compart="Soil", Barcode="ITS2")#
	data.frame(B16s.branches.curves, Compart="Soil", Barcode="ITS2"))
rbind(data.frame(its2.soil.curves, Compart="Soil", Barcode="ITS2"),#
	data.frame(its2.branch.curves, Compart="Branch", Barcode="ITS2"),#
	data.frame(B16s.soil.curves, Compart="Soil", Barcode="16S"),#
	data.frame(B16s.branches.curves, Compart="Branch", Barcode="16S"))
its2.soil.curves
combined.curves <-
rbind(data.frame(its2.soil.curves[,c("sobs","sample","State")], Compart="Soil", Barcode="ITS2"),
data.frame(it s2.branch.curves[,c("sobs","sample","State")], Compart="Branch", Barcode="ITS2"),
data.frame(its2.branch.curves[,c("sobs","sample","State")], Compart="Branch", Barcode="ITS2"),
combined.curves <-#
	rbind(data.frame(its2.soil.curves[,c("sobs","sample","State")], Compart="Soil", Barcode="ITS2"),#
	data.frame(its2.branch.curves[,c("sobs","sample","State")], Compart="Branch", Barcode="ITS2"),#
	data.frame(B16s.soil.curves[,c("sobs","sample","State")], Compart="Soil", Barcode="16S"),#
	data.frame(B16s.branches.curves[,c("sobs","sample","State")], Compart="Branch", Barcode="16S"))
combined.curves
head(combined.curves)
rarefaction.curve(combined.curves)
combined.curves <-#
	rbind(data.frame(its2.soil.curves[,c("numsampled","sobs","sample","State")], Compart="Soil", Barcode="ITS2"),#
	data.frame(its2.branch.curves[,c("numsampled","sobs","sample","State")], Compart="Branch", Barcode="ITS2"),#
	data.frame(B16s.soil.curves[,c("numsampled","sobs","sample","State")], Compart="Soil", Barcode="16S"),#
	data.frame(B16s.branches.curves[,c("numsampled","sobs","sample","State")], Compart="Branch", Barcode="16S"))
rarefaction.curve(combined.curves)
rarefaction.curve(combined.curves) + facet_grid(Compart ~ Barcode)
grid.arrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil"), nrow=2, ncol=2)
?facet_grid
rarefaction.curve(combined.curves) + facet_grid(Compart ~ Barcode, scales='free')
ggarrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil"), nrow=2, ncol=2)
ggarrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil"), nrow=2, ncol=2, common.legend= TRUE, legend="bottom")
ggarrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil"), nrow=2, ncol=2, common.legend= TRUE, legend="rigt")
ggarrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil"), nrow=2, ncol=2, common.legend= TRUE, legend="right")
ggarrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil"), nrow=2, ncol=2, common.legend= TRUE, legend="right") + rare.lgnd
ggarrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil"), nrow=2, ncol=2, common.legend= TRUE, legend="right") + rare.lgnd()
ggarrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil") + rare.lgnd(), nrow=2, ncol=2, common.legend= TRUE, legend="right")
rare.lgnd <- function () theme(legend.text=element_text(size=20), legend.title=element_text(size=20))
ggarrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil") + rare.lgnd(), nrow=2, ncol=2, common.legend= TRUE, legend="right")
ggarrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil"), nrow=2, ncol=2, common.legend= TRUE, legend="right") + rare.lgnd()
rare.lgnd <- function () theme(legend.text=element_text(size=20), legend.title=element_text(size=20))
ggarrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil"), nrow=2, ncol=2, common.legend= TRUE, legend="right") + rare.lgnd()
?ggarrrange
?ggarrange
pdf("../Figures/Figure S1.pdf", 12,10)#
ggarrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil"), nrow=2, ncol=2, common.legend= TRUE, legend="right") + rare.lgnd()#
dev.off()
pdf("../Figures/Figure S1.pdf", 12,10)#
ggarrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil"), nrow=2, ncol=2, common.legend= TRUE, legend="right")#
dev.off()
?ggexport
plots<-ggarrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil"), nrow=2, ncol=2, common.legend= TRUE, legend="right")
ggexport(plots,filename="../Figures/Figure S1.pdf")
ggexport(plots,filename="../Figures/Figure S1.pdf", height=500, width=650)
ggexport(plots,filename="../Figures/Figure S1.pdf", height=480, width=480)
ggexport(plots,filename="../Figures/Figure S1.pdf", height=10, width=10)
ggexport(plots,filename="../Figures/Figure S1.pdf", height=6, width=8)
ggexport(plots,filename="../Figures/Figure S1.pdf", height=8, width=9)
rare.xlab <- function (main="") labs(title=main, x="\n1000 Sequences Sampled", y="")#
rare.ylab <- function (main="") labs(title=main, x="", y="OTU Richness\n")#
rare.main <- function (main="") labs(title=main, x="", y="")#
rare.corn <- function (main="") labs(title=main, x="\n1000 Sequences Sampled", y="OTU Richness\n")
plots<-ggarrange(its2.branches + rare.ylab("ITS2 Branches"), its2.soil + rare.main("ITS2 Soil"), B16s.branches + rare.corn("16S Branches"), B16s.soil + rare.xlab("16S Soil"), nrow=2, ncol=2, common.legend= TRUE, legend="right")
plots
ggexport(plots,filename="../Figures/Figure S1.pdf", height=8, width=9)
